Terminals unused in grammar

   "comment (T_COMMENT)"
   "doc comment (T_DOC_COMMENT)"
   "open tag (T_OPEN_TAG)"
   "open tag with echo (T_OPEN_TAG_WITH_ECHO)"
   "close tag (T_CLOSE_TAG)"
   "whitespace (T_WHITESPACE)"
   T_ERROR


Grammar

    0 $accept: start "end of file"

    1 start: top_statement_list

    2 reserved_non_modifiers: "include (T_INCLUDE)"
    3                       | "include_once (T_INCLUDE_ONCE)"
    4                       | "eval (T_EVAL)"
    5                       | "require (T_REQUIRE)"
    6                       | "require_once (T_REQUIRE_ONCE)"
    7                       | "or (T_LOGICAL_OR)"
    8                       | "xor (T_LOGICAL_XOR)"
    9                       | "and (T_LOGICAL_AND)"
   10                       | "instanceof (T_INSTANCEOF)"
   11                       | "new (T_NEW)"
   12                       | "clone (T_CLONE)"
   13                       | "exit (T_EXIT)"
   14                       | "if (T_IF)"
   15                       | "elseif (T_ELSEIF)"
   16                       | "else (T_ELSE)"
   17                       | "endif (T_ENDIF)"
   18                       | "echo (T_ECHO)"
   19                       | "do (T_DO)"
   20                       | "while (T_WHILE)"
   21                       | "endwhile (T_ENDWHILE)"
   22                       | "for (T_FOR)"
   23                       | "endfor (T_ENDFOR)"
   24                       | "foreach (T_FOREACH)"
   25                       | "endforeach (T_ENDFOREACH)"
   26                       | "declare (T_DECLARE)"
   27                       | "enddeclare (T_ENDDECLARE)"
   28                       | "as (T_AS)"
   29                       | "try (T_TRY)"
   30                       | "catch (T_CATCH)"
   31                       | "finally (T_FINALLY)"
   32                       | "throw (T_THROW)"
   33                       | "use (T_USE)"
   34                       | "insteadof (T_INSTEADOF)"
   35                       | "global (T_GLOBAL)"
   36                       | "var (T_VAR)"
   37                       | "unset (T_UNSET)"
   38                       | "isset (T_ISSET)"
   39                       | "empty (T_EMPTY)"
   40                       | "continue (T_CONTINUE)"
   41                       | "goto (T_GOTO)"
   42                       | "function (T_FUNCTION)"
   43                       | "const (T_CONST)"
   44                       | "return (T_RETURN)"
   45                       | "print (T_PRINT)"
   46                       | "yield (T_YIELD)"
   47                       | "list (T_LIST)"
   48                       | "switch (T_SWITCH)"
   49                       | "endswitch (T_ENDSWITCH)"
   50                       | "case (T_CASE)"
   51                       | "default (T_DEFAULT)"
   52                       | "break (T_BREAK)"
   53                       | "array (T_ARRAY)"
   54                       | "callable (T_CALLABLE)"
   55                       | "extends (T_EXTENDS)"
   56                       | "implements (T_IMPLEMENTS)"
   57                       | "namespace (T_NAMESPACE)"
   58                       | "trait (T_TRAIT)"
   59                       | "interface (T_INTERFACE)"
   60                       | "class (T_CLASS)"
   61                       | "__CLASS__ (T_CLASS_C)"
   62                       | "__TRAIT__ (T_TRAIT_C)"
   63                       | "__FUNCTION__ (T_FUNC_C)"
   64                       | "__METHOD__ (T_METHOD_C)"
   65                       | "__LINE__ (T_LINE)"
   66                       | "__FILE__ (T_FILE)"
   67                       | "__DIR__ (T_DIR)"
   68                       | "__NAMESPACE__ (T_NS_C)"
   69                       | "__halt_compiler (T_HALT_COMPILER)"

   70 semi_reserved: reserved_non_modifiers
   71              | "static (T_STATIC)"
   72              | "abstract (T_ABSTRACT)"
   73              | "final (T_FINAL)"
   74              | "private (T_PRIVATE)"
   75              | "protected (T_PROTECTED)"
   76              | "public (T_PUBLIC)"

   77 identifier: "identifier (T_STRING)"
   78           | semi_reserved

   79 top_statement_list: top_statement_list top_statement
   80                   | %empty

   81 namespace_name: "identifier (T_STRING)"
   82               | namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"

   83 name: namespace_name
   84     | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
   85     | "\\ (T_NS_SEPARATOR)" namespace_name

   86 top_statement: statement
   87              | function_declaration_statement
   88              | class_declaration_statement
   89              | trait_declaration_statement
   90              | interface_declaration_statement
   91              | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'
   92              | "namespace (T_NAMESPACE)" namespace_name ';'

   93 $@1: %empty

   94 top_statement: "namespace (T_NAMESPACE)" namespace_name $@1 '{' top_statement_list '}'

   95 $@2: %empty

   96 top_statement: "namespace (T_NAMESPACE)" $@2 '{' top_statement_list '}'
   97              | "use (T_USE)" mixed_group_use_declaration ';'
   98              | "use (T_USE)" use_type group_use_declaration ';'
   99              | "use (T_USE)" use_declarations ';'
  100              | "use (T_USE)" use_type use_declarations ';'
  101              | "const (T_CONST)" const_list ';'

  102 use_type: "function (T_FUNCTION)"
  103         | "const (T_CONST)"

  104 group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' unprefixed_use_declarations '}'
  105                      | "\\ (T_NS_SEPARATOR)" namespace_name "\\ (T_NS_SEPARATOR)" '{' unprefixed_use_declarations '}'

  106 mixed_group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations '}'
  107                            | "\\ (T_NS_SEPARATOR)" namespace_name "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations '}'

  108 inline_use_declarations: inline_use_declarations ',' inline_use_declaration
  109                        | inline_use_declaration

  110 unprefixed_use_declarations: unprefixed_use_declarations ',' unprefixed_use_declaration
  111                            | unprefixed_use_declaration

  112 use_declarations: use_declarations ',' use_declaration
  113                 | use_declaration

  114 inline_use_declaration: unprefixed_use_declaration
  115                       | use_type unprefixed_use_declaration

  116 unprefixed_use_declaration: namespace_name
  117                           | namespace_name "as (T_AS)" "identifier (T_STRING)"

  118 use_declaration: unprefixed_use_declaration
  119                | "\\ (T_NS_SEPARATOR)" unprefixed_use_declaration

  120 const_list: const_list ',' const_decl
  121           | const_decl

  122 inner_statement_list: inner_statement_list inner_statement
  123                     | %empty

  124 inner_statement: statement
  125                | function_declaration_statement
  126                | class_declaration_statement
  127                | trait_declaration_statement
  128                | interface_declaration_statement
  129                | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'

  130 statement: '{' inner_statement_list '}'
  131          | if_stmt
  132          | alt_if_stmt
  133          | "while (T_WHILE)" '(' expr ')' while_statement
  134          | "do (T_DO)" statement "while (T_WHILE)" '(' expr ')' ';'
  135          | "for (T_FOR)" '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement
  136          | "switch (T_SWITCH)" '(' expr ')' switch_case_list
  137          | "break (T_BREAK)" optional_expr ';'
  138          | "continue (T_CONTINUE)" optional_expr ';'
  139          | "return (T_RETURN)" optional_expr ';'
  140          | "global (T_GLOBAL)" global_var_list ';'
  141          | "static (T_STATIC)" static_var_list ';'
  142          | "echo (T_ECHO)" echo_expr_list ';'
  143          | T_INLINE_HTML
  144          | expr ';'
  145          | "unset (T_UNSET)" '(' unset_variables ')' ';'
  146          | "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable ')' foreach_statement
  147          | "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement

  148 $@3: %empty

  149 statement: "declare (T_DECLARE)" '(' const_list ')' $@3 declare_statement
  150          | ';'
  151          | "try (T_TRY)" '{' inner_statement_list '}' catch_list finally_statement
  152          | "throw (T_THROW)" expr ';'
  153          | "goto (T_GOTO)" "identifier (T_STRING)" ';'
  154          | "identifier (T_STRING)" ':'

  155 catch_list: %empty
  156           | catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

  157 finally_statement: %empty
  158                  | "finally (T_FINALLY)" '{' inner_statement_list '}'

  159 unset_variables: unset_variable
  160                | unset_variables ',' unset_variable

  161 unset_variable: variable

  162 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}'

  163 is_reference: %empty
  164             | '&'

  165 is_variadic: %empty
  166            | "... (T_ELLIPSIS)"

  167 @4: %empty

  168 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

  169 @5: %empty

  170 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

  171 class_modifiers: class_modifier
  172                | class_modifiers class_modifier

  173 class_modifier: "abstract (T_ABSTRACT)"
  174               | "final (T_FINAL)"

  175 @6: %empty

  176 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" backup_doc_comment '{' class_statement_list '}'

  177 @7: %empty

  178 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' class_statement_list '}'

  179 extends_from: %empty
  180             | "extends (T_EXTENDS)" name

  181 interface_extends_list: %empty
  182                       | "extends (T_EXTENDS)" name_list

  183 implements_list: %empty
  184                | "implements (T_IMPLEMENTS)" name_list

  185 foreach_variable: variable
  186                 | '&' variable
  187                 | "list (T_LIST)" '(' assignment_list ')'

  188 for_statement: statement
  189              | ':' inner_statement_list "endfor (T_ENDFOR)" ';'

  190 foreach_statement: statement
  191                  | ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';'

  192 declare_statement: statement
  193                  | ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

  194 switch_case_list: '{' case_list '}'
  195                 | '{' ';' case_list '}'
  196                 | ':' case_list "endswitch (T_ENDSWITCH)" ';'
  197                 | ':' ';' case_list "endswitch (T_ENDSWITCH)" ';'

  198 case_list: %empty
  199          | case_list "case (T_CASE)" expr case_separator inner_statement_list
  200          | case_list "default (T_DEFAULT)" case_separator inner_statement_list

  201 case_separator: ':'
  202               | ';'

  203 while_statement: statement
  204                | ':' inner_statement_list "endwhile (T_ENDWHILE)" ';'

  205 if_stmt_without_else: "if (T_IF)" '(' expr ')' statement
  206                     | if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' statement

  207 if_stmt: if_stmt_without_else
  208        | if_stmt_without_else "else (T_ELSE)" statement

  209 alt_if_stmt_without_else: "if (T_IF)" '(' expr ')' ':' inner_statement_list
  210                         | alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' ':' inner_statement_list

  211 alt_if_stmt: alt_if_stmt_without_else "endif (T_ENDIF)" ';'
  212            | alt_if_stmt_without_else "else (T_ELSE)" ':' inner_statement_list "endif (T_ENDIF)" ';'

  213 parameter_list: non_empty_parameter_list
  214               | %empty

  215 non_empty_parameter_list: parameter
  216                         | non_empty_parameter_list ',' parameter

  217 parameter: optional_type is_reference is_variadic "variable (T_VARIABLE)"
  218          | optional_type is_reference is_variadic "variable (T_VARIABLE)" '=' expr

  219 optional_type: %empty
  220              | type

  221 type: "array (T_ARRAY)"
  222     | "callable (T_CALLABLE)"
  223     | name

  224 return_type: %empty
  225            | ':' type

  226 argument_list: '(' ')'
  227              | '(' non_empty_argument_list ')'

  228 non_empty_argument_list: argument
  229                        | non_empty_argument_list ',' argument

  230 argument: expr
  231         | "... (T_ELLIPSIS)" expr

  232 global_var_list: global_var_list ',' global_var
  233                | global_var

  234 global_var: simple_variable

  235 static_var_list: static_var_list ',' static_var
  236                | static_var

  237 static_var: "variable (T_VARIABLE)"
  238           | "variable (T_VARIABLE)" '=' expr

  239 class_statement_list: class_statement_list class_statement
  240                     | %empty

  241 class_statement: variable_modifiers property_list ';'
  242                | method_modifiers "const (T_CONST)" class_const_list ';'
  243                | "use (T_USE)" name_list trait_adaptations
  244                | method_modifiers function returns_ref identifier '(' parameter_list ')' return_type backup_doc_comment method_body

  245 name_list: name
  246          | name_list ',' name

  247 trait_adaptations: ';'
  248                  | '{' '}'
  249                  | '{' trait_adaptation_list '}'

  250 trait_adaptation_list: trait_adaptation
  251                      | trait_adaptation_list trait_adaptation

  252 trait_adaptation: trait_precedence ';'
  253                 | trait_alias ';'

  254 trait_precedence: absolute_trait_method_reference "insteadof (T_INSTEADOF)" name_list

  255 trait_alias: trait_method_reference "as (T_AS)" "identifier (T_STRING)"
  256            | trait_method_reference "as (T_AS)" reserved_non_modifiers
  257            | trait_method_reference "as (T_AS)" member_modifier identifier
  258            | trait_method_reference "as (T_AS)" member_modifier

  259 trait_method_reference: identifier
  260                       | absolute_trait_method_reference

  261 absolute_trait_method_reference: name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier

  262 method_body: ';'
  263            | '{' inner_statement_list '}'

  264 variable_modifiers: non_empty_member_modifiers
  265                   | "var (T_VAR)"

  266 method_modifiers: %empty
  267                 | non_empty_member_modifiers

  268 non_empty_member_modifiers: member_modifier
  269                           | non_empty_member_modifiers member_modifier

  270 member_modifier: "public (T_PUBLIC)"
  271                | "protected (T_PROTECTED)"
  272                | "private (T_PRIVATE)"
  273                | "static (T_STATIC)"
  274                | "abstract (T_ABSTRACT)"
  275                | "final (T_FINAL)"

  276 property_list: property_list ',' property
  277              | property

  278 property: "variable (T_VARIABLE)" backup_doc_comment
  279         | "variable (T_VARIABLE)" '=' expr backup_doc_comment

  280 class_const_list: class_const_list ',' class_const_decl
  281                 | class_const_decl

  282 class_const_decl: identifier '=' expr backup_doc_comment

  283 const_decl: "identifier (T_STRING)" '=' expr backup_doc_comment

  284 echo_expr_list: echo_expr_list ',' echo_expr
  285               | echo_expr

  286 echo_expr: expr

  287 for_exprs: %empty
  288          | non_empty_for_exprs

  289 non_empty_for_exprs: non_empty_for_exprs ',' expr
  290                    | expr

  291 @8: %empty

  292 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list backup_doc_comment '{' class_statement_list '}'

  293 new_expr: "new (T_NEW)" class_name_reference ctor_arguments
  294         | "new (T_NEW)" anonymous_class

  295 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' '=' expr
  296                      | variable '=' expr
  297                      | variable '=' '&' variable
  298                      | "clone (T_CLONE)" expr
  299                      | variable "+= (T_PLUS_EQUAL)" expr
  300                      | variable "-= (T_MINUS_EQUAL)" expr
  301                      | variable "*= (T_MUL_EQUAL)" expr
  302                      | variable "**= (T_POW_EQUAL)" expr
  303                      | variable "/= (T_DIV_EQUAL)" expr
  304                      | variable ".= (T_CONCAT_EQUAL)" expr
  305                      | variable "%= (T_MOD_EQUAL)" expr
  306                      | variable "&= (T_AND_EQUAL)" expr
  307                      | variable "|= (T_OR_EQUAL)" expr
  308                      | variable "^= (T_XOR_EQUAL)" expr
  309                      | variable "<<= (T_SL_EQUAL)" expr
  310                      | variable ">>= (T_SR_EQUAL)" expr
  311                      | variable "++ (T_INC)"
  312                      | "++ (T_INC)" variable
  313                      | variable "-- (T_DEC)"
  314                      | "-- (T_DEC)" variable
  315                      | expr "|| (T_BOOLEAN_OR)" expr
  316                      | expr "&& (T_BOOLEAN_AND)" expr
  317                      | expr "or (T_LOGICAL_OR)" expr
  318                      | expr "and (T_LOGICAL_AND)" expr
  319                      | expr "xor (T_LOGICAL_XOR)" expr
  320                      | expr '|' expr
  321                      | expr '&' expr
  322                      | expr '^' expr
  323                      | expr '.' expr
  324                      | expr '+' expr
  325                      | expr '-' expr
  326                      | expr '*' expr
  327                      | expr "** (T_POW)" expr
  328                      | expr '/' expr
  329                      | expr '%' expr
  330                      | expr "<< (T_SL)" expr
  331                      | expr ">> (T_SR)" expr
  332                      | '+' expr
  333                      | '-' expr
  334                      | '!' expr
  335                      | '~' expr
  336                      | expr "=== (T_IS_IDENTICAL)" expr
  337                      | expr "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr "== (T_IS_EQUAL)" expr
  339                      | expr "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr '<' expr
  341                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr '>' expr
  343                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr "<=> (T_SPACESHIP)" expr
  345                      | expr "instanceof (T_INSTANCEOF)" class_name_reference
  346                      | '(' expr ')'
  347                      | new_expr
  348                      | expr '?' expr ':' expr
  349                      | expr '?' ':' expr
  350                      | expr "?? (T_COALESCE)" expr
  351                      | internal_functions_in_yacc
  352                      | "(int) (T_INT_CAST)" expr
  353                      | "(double) (T_DOUBLE_CAST)" expr
  354                      | "(string) (T_STRING_CAST)" expr
  355                      | "(array) (T_ARRAY_CAST)" expr
  356                      | "(object) (T_OBJECT_CAST)" expr
  357                      | "(bool) (T_BOOL_CAST)" expr
  358                      | "(unset) (T_UNSET_CAST)" expr
  359                      | "exit (T_EXIT)" exit_expr
  360                      | '@' expr
  361                      | scalar
  362                      | '`' backticks_expr '`'
  363                      | "print (T_PRINT)" expr
  364                      | "yield (T_YIELD)"
  365                      | "yield (T_YIELD)" expr
  366                      | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" expr
  367                      | "yield from (T_YIELD_FROM)" expr
  368                      | function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'
  369                      | "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

  370 function: "function (T_FUNCTION)"

  371 backup_doc_comment: %empty

  372 returns_ref: %empty
  373            | '&'

  374 lexical_vars: %empty
  375             | "use (T_USE)" '(' lexical_var_list ')'

  376 lexical_var_list: lexical_var_list ',' lexical_var
  377                 | lexical_var

  378 lexical_var: "variable (T_VARIABLE)"
  379            | '&' "variable (T_VARIABLE)"

  380 function_call: name argument_list
  381              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list
  382              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list
  383              | callable_expr argument_list

  384 class_name: "static (T_STATIC)"
  385           | name

  386 class_name_reference: class_name
  387                     | new_variable

  388 exit_expr: %empty
  389          | '(' optional_expr ')'

  390 backticks_expr: %empty
  391               | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  392               | encaps_list

  393 ctor_arguments: %empty
  394               | argument_list

  395 dereferencable_scalar: "array (T_ARRAY)" '(' array_pair_list ')'
  396                      | '[' array_pair_list ']'
  397                      | "quoted-string (T_CONSTANT_ENCAPSED_STRING)"

  398 scalar: "integer number (T_LNUMBER)"
  399       | "floating-point number (T_DNUMBER)"
  400       | "__LINE__ (T_LINE)"
  401       | "__FILE__ (T_FILE)"
  402       | "__DIR__ (T_DIR)"
  403       | "__TRAIT__ (T_TRAIT_C)"
  404       | "__METHOD__ (T_METHOD_C)"
  405       | "__FUNCTION__ (T_FUNC_C)"
  406       | "__NAMESPACE__ (T_NS_C)"
  407       | "__CLASS__ (T_CLASS_C)"
  408       | "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  409       | "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)"
  410       | '"' encaps_list '"'
  411       | "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)"
  412       | dereferencable_scalar
  413       | constant

  414 constant: name
  415         | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier
  416         | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier

  417 possible_comma: %empty
  418               | ','

  419 expr: variable
  420     | expr_without_variable

  421 optional_expr: %empty
  422              | expr

  423 variable_class_name: dereferencable

  424 dereferencable: variable
  425               | '(' expr ')'
  426               | dereferencable_scalar

  427 callable_expr: callable_variable
  428              | '(' expr ')'
  429              | dereferencable_scalar

  430 callable_variable: simple_variable
  431                  | dereferencable '[' optional_expr ']'
  432                  | constant '[' optional_expr ']'
  433                  | dereferencable '{' expr '}'
  434                  | dereferencable "-> (T_OBJECT_OPERATOR)" property_name argument_list
  435                  | function_call

  436 variable: callable_variable
  437         | static_member
  438         | dereferencable "-> (T_OBJECT_OPERATOR)" property_name

  439 simple_variable: "variable (T_VARIABLE)"
  440                | '$' '{' expr '}'
  441                | '$' simple_variable

  442 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable
  443              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

  444 new_variable: simple_variable
  445             | new_variable '[' optional_expr ']'
  446             | new_variable '{' expr '}'
  447             | new_variable "-> (T_OBJECT_OPERATOR)" property_name
  448             | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable
  449             | new_variable ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

  450 member_name: identifier
  451            | '{' expr '}'
  452            | simple_variable

  453 property_name: "identifier (T_STRING)"
  454              | '{' expr '}'
  455              | simple_variable

  456 assignment_list: assignment_list ',' assignment_list_element
  457                | assignment_list_element

  458 assignment_list_element: variable
  459                        | "list (T_LIST)" '(' assignment_list ')'
  460                        | %empty

  461 array_pair_list: %empty
  462                | non_empty_array_pair_list possible_comma

  463 non_empty_array_pair_list: non_empty_array_pair_list ',' array_pair
  464                          | array_pair

  465 array_pair: expr "=> (T_DOUBLE_ARROW)" expr
  466           | expr
  467           | expr "=> (T_DOUBLE_ARROW)" '&' variable
  468           | '&' variable

  469 encaps_list: encaps_list encaps_var
  470            | encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  471            | encaps_var
  472            | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var

  473 encaps_var: "variable (T_VARIABLE)"
  474           | "variable (T_VARIABLE)" '[' encaps_var_offset ']'
  475           | "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"
  476           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}'
  477           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '}'
  478           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}'
  479           | "{$ (T_CURLY_OPEN)" variable '}'

  480 encaps_var_offset: "identifier (T_STRING)"
  481                  | "number (T_NUM_STRING)"
  482                  | "variable (T_VARIABLE)"

  483 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')'
  484                           | "empty (T_EMPTY)" '(' expr ')'
  485                           | "include (T_INCLUDE)" expr
  486                           | "include_once (T_INCLUDE_ONCE)" expr
  487                           | "eval (T_EVAL)" '(' expr ')'
  488                           | "require (T_REQUIRE)" expr
  489                           | "require_once (T_REQUIRE_ONCE)" expr

  490 isset_variables: isset_variable
  491                | isset_variables ',' isset_variable

  492 isset_variable: expr


Terminals, with rules where they appear

"end of file" (0) 0
'!' (33) 334
'"' (34) 410
'$' (36) 440 441
'%' (37) 329
'&' (38) 164 186 297 321 373 379 467 468
'(' (40) 91 129 133 134 135 136 145 146 147 149 156 162 187 205 206
    209 210 226 227 244 295 346 368 369 375 389 395 425 428 459 483
    484 487
')' (41) 91 129 133 134 135 136 145 146 147 149 156 162 187 205 206
    209 210 226 227 244 295 346 368 369 375 389 395 425 428 459 483
    484 487
'*' (42) 326
'+' (43) 324 332
',' (44) 108 110 112 120 160 216 229 232 235 246 276 280 284 289 376
    418 456 463 491
'-' (45) 325 333
'.' (46) 323
'/' (47) 328
':' (58) 154 189 191 193 196 197 201 204 209 210 212 225 348 349
';' (59) 91 92 97 98 99 100 101 129 134 135 137 138 139 140 141 142
    144 145 150 152 153 189 191 193 195 196 197 202 204 211 212 241
    242 247 252 253 262
'<' (60) 340
'=' (61) 218 238 279 282 283 295 296 297
'>' (62) 342
'?' (63) 348 349
'@' (64) 360
'[' (91) 396 431 432 445 474 478
']' (93) 396 431 432 445 474 478
'^' (94) 322
'`' (96) 362
'{' (123) 94 96 104 105 106 107 130 151 156 158 162 168 170 176 178
    194 195 248 249 263 292 368 369 433 440 446 451 454
'|' (124) 320
'}' (125) 94 96 104 105 106 107 130 151 156 158 162 168 170 176 178
    194 195 248 249 263 292 368 369 433 440 446 451 454 476 477 478
    479
'~' (126) 335
error (256)
"include (T_INCLUDE)" (258) 2 485
"include_once (T_INCLUDE_ONCE)" (259) 3 486
"eval (T_EVAL)" (260) 4 487
"require (T_REQUIRE)" (261) 5 488
"require_once (T_REQUIRE_ONCE)" (262) 6 489
"or (T_LOGICAL_OR)" (263) 7 317
"xor (T_LOGICAL_XOR)" (264) 8 319
"and (T_LOGICAL_AND)" (265) 9 318
"print (T_PRINT)" (266) 45 363
"yield (T_YIELD)" (267) 46 364 365 366
"=> (T_DOUBLE_ARROW)" (268) 147 366 465 467
"yield from (T_YIELD_FROM)" (269) 367
"+= (T_PLUS_EQUAL)" (270) 299
"-= (T_MINUS_EQUAL)" (271) 300
"*= (T_MUL_EQUAL)" (272) 301
"/= (T_DIV_EQUAL)" (273) 303
".= (T_CONCAT_EQUAL)" (274) 304
"%= (T_MOD_EQUAL)" (275) 305
"&= (T_AND_EQUAL)" (276) 306
"|= (T_OR_EQUAL)" (277) 307
"^= (T_XOR_EQUAL)" (278) 308
"<<= (T_SL_EQUAL)" (279) 309
">>= (T_SR_EQUAL)" (280) 310
"**= (T_POW_EQUAL)" (281) 302
"?? (T_COALESCE)" (282) 350
"|| (T_BOOLEAN_OR)" (283) 315
"&& (T_BOOLEAN_AND)" (284) 316
"== (T_IS_EQUAL)" (285) 338
"!= (T_IS_NOT_EQUAL)" (286) 339
"=== (T_IS_IDENTICAL)" (287) 336
"!== (T_IS_NOT_IDENTICAL)" (288) 337
"<=> (T_SPACESHIP)" (289) 344
"<= (T_IS_SMALLER_OR_EQUAL)" (290) 341
">= (T_IS_GREATER_OR_EQUAL)" (291) 343
"<< (T_SL)" (292) 330
">> (T_SR)" (293) 331
"instanceof (T_INSTANCEOF)" (294) 10 345
"++ (T_INC)" (295) 311 312
"-- (T_DEC)" (296) 313 314
"(int) (T_INT_CAST)" (297) 352
"(double) (T_DOUBLE_CAST)" (298) 353
"(string) (T_STRING_CAST)" (299) 354
"(array) (T_ARRAY_CAST)" (300) 355
"(object) (T_OBJECT_CAST)" (301) 356
"(bool) (T_BOOL_CAST)" (302) 357
"(unset) (T_UNSET_CAST)" (303) 358
"** (T_POW)" (304) 327
"new (T_NEW)" (305) 11 293 294
"clone (T_CLONE)" (306) 12 298
T_NOELSE (307)
"elseif (T_ELSEIF)" (308) 15 206 210
"else (T_ELSE)" (309) 16 208 212
"endif (T_ENDIF)" (310) 17 211 212
"static (T_STATIC)" (311) 71 141 273 369 384
"abstract (T_ABSTRACT)" (312) 72 173 274
"final (T_FINAL)" (313) 73 174 275
"private (T_PRIVATE)" (314) 74 272
"protected (T_PROTECTED)" (315) 75 271
"public (T_PUBLIC)" (316) 76 270
"integer number (T_LNUMBER)" (317) 398
"floating-point number (T_DNUMBER)" (318) 399
"identifier (T_STRING)" (319) 77 81 82 117 153 154 162 168 170 176
    178 255 283 453 475 480
"variable (T_VARIABLE)" (320) 156 217 218 237 238 278 279 378 379 439
    473 474 475 482
T_INLINE_HTML (321) 143
"quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" (322) 391
    408 470 472
"quoted-string (T_CONSTANT_ENCAPSED_STRING)" (323) 397
"variable name (T_STRING_VARNAME)" (324) 477 478
"number (T_NUM_STRING)" (325) 481
"exit (T_EXIT)" (326) 13 359
"if (T_IF)" (327) 14 205 209
"echo (T_ECHO)" (328) 18 142
"do (T_DO)" (329) 19 134
"while (T_WHILE)" (330) 20 133 134
"endwhile (T_ENDWHILE)" (331) 21 204
"for (T_FOR)" (332) 22 135
"endfor (T_ENDFOR)" (333) 23 189
"foreach (T_FOREACH)" (334) 24 146 147
"endforeach (T_ENDFOREACH)" (335) 25 191
"declare (T_DECLARE)" (336) 26 149
"enddeclare (T_ENDDECLARE)" (337) 27 193
"as (T_AS)" (338) 28 117 146 147 255 256 257 258
"switch (T_SWITCH)" (339) 48 136
"endswitch (T_ENDSWITCH)" (340) 49 196 197
"case (T_CASE)" (341) 50 199
"default (T_DEFAULT)" (342) 51 200
"break (T_BREAK)" (343) 52 137
"continue (T_CONTINUE)" (344) 40 138
"goto (T_GOTO)" (345) 41 153
"function (T_FUNCTION)" (346) 42 102 370
"const (T_CONST)" (347) 43 101 103 242
"return (T_RETURN)" (348) 44 139
"try (T_TRY)" (349) 29 151
"catch (T_CATCH)" (350) 30 156
"finally (T_FINALLY)" (351) 31 158
"throw (T_THROW)" (352) 32 152
"use (T_USE)" (353) 33 97 98 99 100 243 375
"insteadof (T_INSTEADOF)" (354) 34 254
"global (T_GLOBAL)" (355) 35 140
"var (T_VAR)" (356) 36 265
"unset (T_UNSET)" (357) 37 145
"isset (T_ISSET)" (358) 38 483
"empty (T_EMPTY)" (359) 39 484
"__halt_compiler (T_HALT_COMPILER)" (360) 69 91 129
"class (T_CLASS)" (361) 60 168 170 292
"trait (T_TRAIT)" (362) 58 176
"interface (T_INTERFACE)" (363) 59 178
"extends (T_EXTENDS)" (364) 55 180 182
"implements (T_IMPLEMENTS)" (365) 56 184
"-> (T_OBJECT_OPERATOR)" (366) 434 438 447 475
"list (T_LIST)" (367) 47 187 295 459
"array (T_ARRAY)" (368) 53 221 395
"callable (T_CALLABLE)" (369) 54 222
"__LINE__ (T_LINE)" (370) 65 400
"__FILE__ (T_FILE)" (371) 66 401
"__DIR__ (T_DIR)" (372) 67 402
"__CLASS__ (T_CLASS_C)" (373) 61 407
"__TRAIT__ (T_TRAIT_C)" (374) 62 403
"__METHOD__ (T_METHOD_C)" (375) 64 404
"__FUNCTION__ (T_FUNC_C)" (376) 63 405
"comment (T_COMMENT)" (377)
"doc comment (T_DOC_COMMENT)" (378)
"open tag (T_OPEN_TAG)" (379)
"open tag with echo (T_OPEN_TAG_WITH_ECHO)" (380)
"close tag (T_CLOSE_TAG)" (381)
"whitespace (T_WHITESPACE)" (382)
"heredoc start (T_START_HEREDOC)" (383) 408 409 411
"heredoc end (T_END_HEREDOC)" (384) 408 409 411
"${ (T_DOLLAR_OPEN_CURLY_BRACES)" (385) 476 477 478
"{$ (T_CURLY_OPEN)" (386) 479
":: (T_PAAMAYIM_NEKUDOTAYIM)" (387) 261 381 382 415 416 442 443 448
    449
"namespace (T_NAMESPACE)" (388) 57 84 92 94 96
"__NAMESPACE__ (T_NS_C)" (389) 68 406
"\\ (T_NS_SEPARATOR)" (390) 82 84 85 104 105 106 107 119
"... (T_ELLIPSIS)" (391) 166 231
T_ERROR (392)


Nonterminals, with rules where they appear

$accept (166)
    on left: 0
start (167)
    on left: 1, on right: 0
reserved_non_modifiers (168)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
    44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64
    65 66 67 68 69, on right: 70 256
semi_reserved (169)
    on left: 70 71 72 73 74 75 76, on right: 78
identifier (170)
    on left: 77 78, on right: 244 257 259 261 282 415 416 450
top_statement_list (171)
    on left: 79 80, on right: 1 79 94 96
namespace_name (172)
    on left: 81 82, on right: 82 83 84 85 92 94 104 105 106 107 116
    117
name (173)
    on left: 83 84 85, on right: 156 180 223 245 246 261 380 385 414
top_statement (174)
    on left: 86 87 88 89 90 91 92 94 96 97 98 99 100 101, on right:
    79
$@1 (175)
    on left: 93, on right: 94
$@2 (176)
    on left: 95, on right: 96
use_type (177)
    on left: 102 103, on right: 98 100 115
group_use_declaration (178)
    on left: 104 105, on right: 98
mixed_group_use_declaration (179)
    on left: 106 107, on right: 97
inline_use_declarations (180)
    on left: 108 109, on right: 106 107 108
unprefixed_use_declarations (181)
    on left: 110 111, on right: 104 105 110
use_declarations (182)
    on left: 112 113, on right: 99 100 112
inline_use_declaration (183)
    on left: 114 115, on right: 108 109
unprefixed_use_declaration (184)
    on left: 116 117, on right: 110 111 114 115 118 119
use_declaration (185)
    on left: 118 119, on right: 112 113
const_list (186)
    on left: 120 121, on right: 101 120 149
inner_statement_list (187)
    on left: 122 123, on right: 122 130 151 156 158 162 189 191 193
    199 200 204 209 210 212 263 368 369
inner_statement (188)
    on left: 124 125 126 127 128 129, on right: 122
statement (189)
    on left: 130 131 132 133 134 135 136 137 138 139 140 141 142 143
    144 145 146 147 149 150 151 152 153 154, on right: 86 124 134 188
    190 192 203 205 206 208
$@3 (190)
    on left: 148, on right: 149
catch_list (191)
    on left: 155 156, on right: 151 156
finally_statement (192)
    on left: 157 158, on right: 151
unset_variables (193)
    on left: 159 160, on right: 145 160
unset_variable (194)
    on left: 161, on right: 159 160
function_declaration_statement (195)
    on left: 162, on right: 87 125
is_reference (196)
    on left: 163 164, on right: 217 218
is_variadic (197)
    on left: 165 166, on right: 217 218
class_declaration_statement (198)
    on left: 168 170, on right: 88 126
@4 (199)
    on left: 167, on right: 168
@5 (200)
    on left: 169, on right: 170
class_modifiers (201)
    on left: 171 172, on right: 168 172
class_modifier (202)
    on left: 173 174, on right: 171 172
trait_declaration_statement (203)
    on left: 176, on right: 89 127
@6 (204)
    on left: 175, on right: 176
interface_declaration_statement (205)
    on left: 178, on right: 90 128
@7 (206)
    on left: 177, on right: 178
extends_from (207)
    on left: 179 180, on right: 168 170 292
interface_extends_list (208)
    on left: 181 182, on right: 178
implements_list (209)
    on left: 183 184, on right: 168 170 292
foreach_variable (210)
    on left: 185 186 187, on right: 146 147
for_statement (211)
    on left: 188 189, on right: 135
foreach_statement (212)
    on left: 190 191, on right: 146 147
declare_statement (213)
    on left: 192 193, on right: 149
switch_case_list (214)
    on left: 194 195 196 197, on right: 136
case_list (215)
    on left: 198 199 200, on right: 194 195 196 197 199 200
case_separator (216)
    on left: 201 202, on right: 199 200
while_statement (217)
    on left: 203 204, on right: 133
if_stmt_without_else (218)
    on left: 205 206, on right: 206 207 208
if_stmt (219)
    on left: 207 208, on right: 131
alt_if_stmt_without_else (220)
    on left: 209 210, on right: 210 211 212
alt_if_stmt (221)
    on left: 211 212, on right: 132
parameter_list (222)
    on left: 213 214, on right: 162 244 368 369
non_empty_parameter_list (223)
    on left: 215 216, on right: 213 216
parameter (224)
    on left: 217 218, on right: 215 216
optional_type (225)
    on left: 219 220, on right: 217 218
type (226)
    on left: 221 222 223, on right: 220 225
return_type (227)
    on left: 224 225, on right: 162 244 368 369
argument_list (228)
    on left: 226 227, on right: 380 381 382 383 394 434
non_empty_argument_list (229)
    on left: 228 229, on right: 227 229
argument (230)
    on left: 230 231, on right: 228 229
global_var_list (231)
    on left: 232 233, on right: 140 232
global_var (232)
    on left: 234, on right: 232 233
static_var_list (233)
    on left: 235 236, on right: 141 235
static_var (234)
    on left: 237 238, on right: 235 236
class_statement_list (235)
    on left: 239 240, on right: 168 170 176 178 239 292
class_statement (236)
    on left: 241 242 243 244, on right: 239
name_list (237)
    on left: 245 246, on right: 182 184 243 246 254
trait_adaptations (238)
    on left: 247 248 249, on right: 243
trait_adaptation_list (239)
    on left: 250 251, on right: 249 251
trait_adaptation (240)
    on left: 252 253, on right: 250 251
trait_precedence (241)
    on left: 254, on right: 252
trait_alias (242)
    on left: 255 256 257 258, on right: 253
trait_method_reference (243)
    on left: 259 260, on right: 255 256 257 258
absolute_trait_method_reference (244)
    on left: 261, on right: 254 260
method_body (245)
    on left: 262 263, on right: 244
variable_modifiers (246)
    on left: 264 265, on right: 241
method_modifiers (247)
    on left: 266 267, on right: 242 244
non_empty_member_modifiers (248)
    on left: 268 269, on right: 264 267 269
member_modifier (249)
    on left: 270 271 272 273 274 275, on right: 257 258 268 269
property_list (250)
    on left: 276 277, on right: 241 276
property (251)
    on left: 278 279, on right: 276 277
class_const_list (252)
    on left: 280 281, on right: 242 280
class_const_decl (253)
    on left: 282, on right: 280 281
const_decl (254)
    on left: 283, on right: 120 121
echo_expr_list (255)
    on left: 284 285, on right: 142 284
echo_expr (256)
    on left: 286, on right: 284 285
for_exprs (257)
    on left: 287 288, on right: 135
non_empty_for_exprs (258)
    on left: 289 290, on right: 288 289
anonymous_class (259)
    on left: 292, on right: 294
@8 (260)
    on left: 291, on right: 292
new_expr (261)
    on left: 293 294, on right: 347
expr_without_variable (262)
    on left: 295 296 297 298 299 300 301 302 303 304 305 306 307 308
    309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324
    325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340
    341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356
    357 358 359 360 361 362 363 364 365 366 367 368 369, on right:
    420
function (263)
    on left: 370, on right: 162 244 368 369
backup_doc_comment (264)
    on left: 371, on right: 162 168 170 176 178 244 278 279 282 283
    292 368 369
returns_ref (265)
    on left: 372 373, on right: 162 244 368 369
lexical_vars (266)
    on left: 374 375, on right: 368 369
lexical_var_list (267)
    on left: 376 377, on right: 375 376
lexical_var (268)
    on left: 378 379, on right: 376 377
function_call (269)
    on left: 380 381 382 383, on right: 435
class_name (270)
    on left: 384 385, on right: 381 386 415 442 448
class_name_reference (271)
    on left: 386 387, on right: 293 345
exit_expr (272)
    on left: 388 389, on right: 359
backticks_expr (273)
    on left: 390 391 392, on right: 362
ctor_arguments (274)
    on left: 393 394, on right: 292 293
dereferencable_scalar (275)
    on left: 395 396 397, on right: 412 426 429
scalar (276)
    on left: 398 399 400 401 402 403 404 405 406 407 408 409 410 411
    412 413, on right: 361
constant (277)
    on left: 414 415 416, on right: 413 432
possible_comma (278)
    on left: 417 418, on right: 462
expr (279)
    on left: 419 420, on right: 133 134 136 144 146 147 152 199 205
    206 209 210 218 230 231 238 279 282 283 286 289 290 295 296 298
    299 300 301 302 303 304 305 306 307 308 309 310 315 316 317 318
    319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334
    335 336 337 338 339 340 341 342 343 344 345 346 348 349 350 352
    353 354 355 356 357 358 360 363 365 366 367 422 425 428 433 440
    446 451 454 465 466 467 476 478 484 485 486 487 488 489 492
optional_expr (280)
    on left: 421 422, on right: 137 138 139 389 431 432 445
variable_class_name (281)
    on left: 423, on right: 382 416 443
dereferencable (282)
    on left: 424 425 426, on right: 423 431 433 434 438
callable_expr (283)
    on left: 427 428 429, on right: 383
callable_variable (284)
    on left: 430 431 432 433 434 435, on right: 427 436
variable (285)
    on left: 436 437 438, on right: 161 185 186 296 297 299 300 301
    302 303 304 305 306 307 308 309 310 311 312 313 314 419 424 458
    467 468 479
simple_variable (286)
    on left: 439 440 441, on right: 234 430 441 442 443 444 448 449
    452 455
static_member (287)
    on left: 442 443, on right: 437
new_variable (288)
    on left: 444 445 446 447 448 449, on right: 387 445 446 447 449
member_name (289)
    on left: 450 451 452, on right: 381 382
property_name (290)
    on left: 453 454 455, on right: 434 438 447
assignment_list (291)
    on left: 456 457, on right: 187 295 456 459
assignment_list_element (292)
    on left: 458 459 460, on right: 456 457
array_pair_list (293)
    on left: 461 462, on right: 395 396
non_empty_array_pair_list (294)
    on left: 463 464, on right: 462 463
array_pair (295)
    on left: 465 466 467 468, on right: 463 464
encaps_list (296)
    on left: 469 470 471 472, on right: 392 410 411 469 470
encaps_var (297)
    on left: 473 474 475 476 477 478 479, on right: 469 471 472
encaps_var_offset (298)
    on left: 480 481 482, on right: 474
internal_functions_in_yacc (299)
    on left: 483 484 485 486 487 488 489, on right: 351
isset_variables (300)
    on left: 490 491, on right: 483 491
isset_variable (301)
    on left: 492, on right: 490 491


State 0

    0 $accept: . start "end of file"

    $default  reduce using rule 80 (top_statement_list)

    start               go to state 1
    top_statement_list  go to state 2


State 1

    0 $accept: start . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 start: top_statement_list .
   79 top_statement_list: top_statement_list . top_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "const (T_CONST)"                             shift, and go to state 51
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "use (T_USE)"                                 shift, and go to state 55
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 60
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 74
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 1 (start)

    namespace_name                   go to state 83
    name                             go to state 84
    top_statement                    go to state 85
    statement                        go to state 86
    function_declaration_statement   go to state 87
    class_declaration_statement      go to state 88
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 91
    interface_declaration_statement  go to state 92
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 3

    0 $accept: start "end of file" .

    $default  accept


State 4

  485 internal_functions_in_yacc: "include (T_INCLUDE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 118
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 5

  486 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 119
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 6

  487 internal_functions_in_yacc: "eval (T_EVAL)" . '(' expr ')'

    '('  shift, and go to state 120


State 7

  488 internal_functions_in_yacc: "require (T_REQUIRE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 121
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 8

  489 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 122
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 9

  363 expr_without_variable: "print (T_PRINT)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 123
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 10

  364 expr_without_variable: "yield (T_YIELD)" .
  365                      | "yield (T_YIELD)" . expr
  366                      | "yield (T_YIELD)" . expr "=> (T_DOUBLE_ARROW)" expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 364 (expr_without_variable)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 124
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 11

  367 expr_without_variable: "yield from (T_YIELD_FROM)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 125
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 12

  332 expr_without_variable: '+' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 126
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 13

  333 expr_without_variable: '-' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 127
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 14

  334 expr_without_variable: '!' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 128
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 15

  335 expr_without_variable: '~' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 129
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 16

  312 expr_without_variable: "++ (T_INC)" . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 134
    simple_variable        go to state 111
    static_member          go to state 112


State 17

  314 expr_without_variable: "-- (T_DEC)" . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 135
    simple_variable        go to state 111
    static_member          go to state 112


State 18

  352 expr_without_variable: "(int) (T_INT_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 136
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 19

  353 expr_without_variable: "(double) (T_DOUBLE_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 137
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 20

  354 expr_without_variable: "(string) (T_STRING_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 138
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 21

  355 expr_without_variable: "(array) (T_ARRAY_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 139
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 22

  356 expr_without_variable: "(object) (T_OBJECT_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 140
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 23

  357 expr_without_variable: "(bool) (T_BOOL_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 141
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 24

  358 expr_without_variable: "(unset) (T_UNSET_CAST)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 142
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 25

  360 expr_without_variable: '@' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 143
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 26

  396 dereferencable_scalar: '[' . array_pair_list ']'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '&'                                           shift, and go to state 144
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 461 (array_pair_list)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 145
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    array_pair_list             go to state 146
    non_empty_array_pair_list   go to state 147
    array_pair                  go to state 148
    internal_functions_in_yacc  go to state 113


State 27

  293 new_expr: "new (T_NEW)" . class_name_reference ctor_arguments
  294         | "new (T_NEW)" . anonymous_class

    "static (T_STATIC)"        shift, and go to state 130
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 35
    "class (T_CLASS)"          shift, and go to state 149
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76
    '$'                        shift, and go to state 82

    namespace_name        go to state 83
    name                  go to state 150
    anonymous_class       go to state 151
    class_name            go to state 152
    class_name_reference  go to state 153
    simple_variable       go to state 154
    new_variable          go to state 155


State 28

  298 expr_without_variable: "clone (T_CLONE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 156
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 29

  141 statement: "static (T_STATIC)" . static_var_list ';'
  369 expr_without_variable: "static (T_STATIC)" . function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'
  384 class_name: "static (T_STATIC)" .

    "variable (T_VARIABLE)"  shift, and go to state 157
    "function (T_FUNCTION)"  shift, and go to state 50

    $default  reduce using rule 384 (class_name)

    static_var_list  go to state 158
    static_var       go to state 159
    function         go to state 160


State 30

  173 class_modifier: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 173 (class_modifier)


State 31

  174 class_modifier: "final (T_FINAL)" .

    $default  reduce using rule 174 (class_modifier)


State 32

  398 scalar: "integer number (T_LNUMBER)" .

    $default  reduce using rule 398 (scalar)


State 33

  399 scalar: "floating-point number (T_DNUMBER)" .

    $default  reduce using rule 399 (scalar)


State 34

   81 namespace_name: "identifier (T_STRING)" .
  154 statement: "identifier (T_STRING)" . ':'

    ':'  shift, and go to state 161

    $default  reduce using rule 81 (namespace_name)


State 35

  439 simple_variable: "variable (T_VARIABLE)" .

    $default  reduce using rule 439 (simple_variable)


State 36

  143 statement: T_INLINE_HTML .

    $default  reduce using rule 143 (statement)


State 37

  397 dereferencable_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    $default  reduce using rule 397 (dereferencable_scalar)


State 38

  359 expr_without_variable: "exit (T_EXIT)" . exit_expr

    '('  shift, and go to state 162

    $default  reduce using rule 388 (exit_expr)

    exit_expr  go to state 163


State 39

  205 if_stmt_without_else: "if (T_IF)" . '(' expr ')' statement
  209 alt_if_stmt_without_else: "if (T_IF)" . '(' expr ')' ':' inner_statement_list

    '('  shift, and go to state 164


State 40

  142 statement: "echo (T_ECHO)" . echo_expr_list ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    echo_expr_list              go to state 165
    echo_expr                   go to state 166
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 167
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 41

  134 statement: "do (T_DO)" . statement "while (T_WHILE)" '(' expr ')' ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 168
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 42

  133 statement: "while (T_WHILE)" . '(' expr ')' while_statement

    '('  shift, and go to state 169


State 43

  135 statement: "for (T_FOR)" . '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement

    '('  shift, and go to state 170


State 44

  146 statement: "foreach (T_FOREACH)" . '(' expr "as (T_AS)" foreach_variable ')' foreach_statement
  147          | "foreach (T_FOREACH)" . '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement

    '('  shift, and go to state 171


State 45

  149 statement: "declare (T_DECLARE)" . '(' const_list ')' $@3 declare_statement

    '('  shift, and go to state 172


State 46

  136 statement: "switch (T_SWITCH)" . '(' expr ')' switch_case_list

    '('  shift, and go to state 173


State 47

  137 statement: "break (T_BREAK)" . optional_expr ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 421 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 175
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 48

  138 statement: "continue (T_CONTINUE)" . optional_expr ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 421 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 176
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 49

  153 statement: "goto (T_GOTO)" . "identifier (T_STRING)" ';'

    "identifier (T_STRING)"  shift, and go to state 177


State 50

  370 function: "function (T_FUNCTION)" .

    $default  reduce using rule 370 (function)


State 51

  101 top_statement: "const (T_CONST)" . const_list ';'

    "identifier (T_STRING)"  shift, and go to state 178

    const_list  go to state 179
    const_decl  go to state 180


State 52

  139 statement: "return (T_RETURN)" . optional_expr ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 421 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 181
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 53

  151 statement: "try (T_TRY)" . '{' inner_statement_list '}' catch_list finally_statement

    '{'  shift, and go to state 182


State 54

  152 statement: "throw (T_THROW)" . expr ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 183
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 55

   97 top_statement: "use (T_USE)" . mixed_group_use_declaration ';'
   98              | "use (T_USE)" . use_type group_use_declaration ';'
   99              | "use (T_USE)" . use_declarations ';'
  100              | "use (T_USE)" . use_type use_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 115
    "function (T_FUNCTION)"  shift, and go to state 184
    "const (T_CONST)"        shift, and go to state 185
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 186

    namespace_name               go to state 187
    use_type                     go to state 188
    mixed_group_use_declaration  go to state 189
    use_declarations             go to state 190
    unprefixed_use_declaration   go to state 191
    use_declaration              go to state 192


State 56

  140 statement: "global (T_GLOBAL)" . global_var_list ';'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 82

    global_var_list  go to state 193
    global_var       go to state 194
    simple_variable  go to state 195


State 57

  145 statement: "unset (T_UNSET)" . '(' unset_variables ')' ';'

    '('  shift, and go to state 196


State 58

  483 internal_functions_in_yacc: "isset (T_ISSET)" . '(' isset_variables ')'

    '('  shift, and go to state 197


State 59

  484 internal_functions_in_yacc: "empty (T_EMPTY)" . '(' expr ')'

    '('  shift, and go to state 198


State 60

   91 top_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 199


State 61

  170 class_declaration_statement: "class (T_CLASS)" . @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 169 (@5)

    @5  go to state 200


State 62

  176 trait_declaration_statement: "trait (T_TRAIT)" . @6 "identifier (T_STRING)" backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 175 (@6)

    @6  go to state 201


State 63

  178 interface_declaration_statement: "interface (T_INTERFACE)" . @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 177 (@7)

    @7  go to state 202


State 64

  295 expr_without_variable: "list (T_LIST)" . '(' assignment_list ')' '=' expr

    '('  shift, and go to state 203


State 65

  395 dereferencable_scalar: "array (T_ARRAY)" . '(' array_pair_list ')'

    '('  shift, and go to state 204


State 66

  400 scalar: "__LINE__ (T_LINE)" .

    $default  reduce using rule 400 (scalar)


State 67

  401 scalar: "__FILE__ (T_FILE)" .

    $default  reduce using rule 401 (scalar)


State 68

  402 scalar: "__DIR__ (T_DIR)" .

    $default  reduce using rule 402 (scalar)


State 69

  407 scalar: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 407 (scalar)


State 70

  403 scalar: "__TRAIT__ (T_TRAIT_C)" .

    $default  reduce using rule 403 (scalar)


State 71

  404 scalar: "__METHOD__ (T_METHOD_C)" .

    $default  reduce using rule 404 (scalar)


State 72

  405 scalar: "__FUNCTION__ (T_FUNC_C)" .

    $default  reduce using rule 405 (scalar)


State 73

  408 scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  409       | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"
  411       | "heredoc start (T_START_HEREDOC)" . encaps_list "heredoc end (T_END_HEREDOC)"

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 206
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 207
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209

    encaps_list  go to state 210
    encaps_var   go to state 211


State 74

   84 name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
   92 top_statement: "namespace (T_NAMESPACE)" . namespace_name ';'
   94              | "namespace (T_NAMESPACE)" . namespace_name $@1 '{' top_statement_list '}'
   96              | "namespace (T_NAMESPACE)" . $@2 '{' top_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 212

    $default  reduce using rule 95 ($@2)

    namespace_name  go to state 213
    $@2             go to state 214


State 75

  406 scalar: "__NAMESPACE__ (T_NS_C)" .

    $default  reduce using rule 406 (scalar)


State 76

   85 name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 215


State 77

  346 expr_without_variable: '(' . expr ')'
  425 dereferencable: '(' . expr ')'
  428 callable_expr: '(' . expr ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 216
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 78

  150 statement: ';' .

    $default  reduce using rule 150 (statement)


State 79

  130 statement: '{' . inner_statement_list '}'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 217


State 80

  362 expr_without_variable: '`' . backticks_expr '`'

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 218
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209

    $default  reduce using rule 390 (backticks_expr)

    backticks_expr  go to state 219
    encaps_list     go to state 220
    encaps_var      go to state 211


State 81

  410 scalar: '"' . encaps_list '"'

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 221
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209

    encaps_list  go to state 222
    encaps_var   go to state 211


State 82

  440 simple_variable: '$' . '{' expr '}'
  441                | '$' . simple_variable

    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 223
    '$'                      shift, and go to state 82

    simple_variable  go to state 224


State 83

   82 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   83 name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 83 (name)


State 84

  380 function_call: name . argument_list
  385 class_name: name .
  414 constant: name .

    '('  shift, and go to state 226

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 385 (class_name)
    $default                       reduce using rule 414 (constant)

    argument_list  go to state 227


State 85

   79 top_statement_list: top_statement_list top_statement .

    $default  reduce using rule 79 (top_statement_list)


State 86

   86 top_statement: statement .

    $default  reduce using rule 86 (top_statement)


State 87

   87 top_statement: function_declaration_statement .

    $default  reduce using rule 87 (top_statement)


State 88

   88 top_statement: class_declaration_statement .

    $default  reduce using rule 88 (top_statement)


State 89

  168 class_declaration_statement: class_modifiers . "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'
  172 class_modifiers: class_modifiers . class_modifier

    "abstract (T_ABSTRACT)"  shift, and go to state 30
    "final (T_FINAL)"        shift, and go to state 31
    "class (T_CLASS)"        shift, and go to state 228

    class_modifier  go to state 229


State 90

  171 class_modifiers: class_modifier .

    $default  reduce using rule 171 (class_modifiers)


State 91

   89 top_statement: trait_declaration_statement .

    $default  reduce using rule 89 (top_statement)


State 92

   90 top_statement: interface_declaration_statement .

    $default  reduce using rule 90 (top_statement)


State 93

  206 if_stmt_without_else: if_stmt_without_else . "elseif (T_ELSEIF)" '(' expr ')' statement
  207 if_stmt: if_stmt_without_else .
  208        | if_stmt_without_else . "else (T_ELSE)" statement

    "elseif (T_ELSEIF)"  shift, and go to state 230
    "else (T_ELSE)"      shift, and go to state 231

    $default  reduce using rule 207 (if_stmt)


State 94

  131 statement: if_stmt .

    $default  reduce using rule 131 (statement)


State 95

  210 alt_if_stmt_without_else: alt_if_stmt_without_else . "elseif (T_ELSEIF)" '(' expr ')' ':' inner_statement_list
  211 alt_if_stmt: alt_if_stmt_without_else . "endif (T_ENDIF)" ';'
  212            | alt_if_stmt_without_else . "else (T_ELSE)" ':' inner_statement_list "endif (T_ENDIF)" ';'

    "elseif (T_ELSEIF)"  shift, and go to state 232
    "else (T_ELSE)"      shift, and go to state 233
    "endif (T_ENDIF)"    shift, and go to state 234


State 96

  132 statement: alt_if_stmt .

    $default  reduce using rule 132 (statement)


State 97

  347 expr_without_variable: new_expr .

    $default  reduce using rule 347 (expr_without_variable)


State 98

  420 expr: expr_without_variable .

    $default  reduce using rule 420 (expr)


State 99

  162 function_declaration_statement: function . returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}'
  368 expr_without_variable: function . returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    '&'  shift, and go to state 235

    $default  reduce using rule 372 (returns_ref)

    returns_ref  go to state 236


State 100

  435 callable_variable: function_call .

    $default  reduce using rule 435 (callable_variable)


State 101

  381 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list
  415 constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier
  442 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 237


State 102

  412 scalar: dereferencable_scalar .
  426 dereferencable: dereferencable_scalar .
  429 callable_expr: dereferencable_scalar .

    '['                            reduce using rule 426 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 426 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 426 (dereferencable)
    '('                            reduce using rule 429 (callable_expr)
    '{'                            reduce using rule 426 (dereferencable)
    $default                       reduce using rule 412 (scalar)


State 103

  361 expr_without_variable: scalar .

    $default  reduce using rule 361 (expr_without_variable)


State 104

  413 scalar: constant .
  432 callable_variable: constant . '[' optional_expr ']'

    '['  shift, and go to state 238

    $default  reduce using rule 413 (scalar)


State 105

  144 statement: expr . ';'
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ';'                           shift, and go to state 268


State 106

  382 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list
  416 constant: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier
  443 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 269


State 107

  423 variable_class_name: dereferencable .
  431 callable_variable: dereferencable . '[' optional_expr ']'
  433                  | dereferencable . '{' expr '}'
  434                  | dereferencable . "-> (T_OBJECT_OPERATOR)" property_name argument_list
  438 variable: dereferencable . "-> (T_OBJECT_OPERATOR)" property_name

    '['                       shift, and go to state 270
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 271
    '{'                       shift, and go to state 272

    $default  reduce using rule 423 (variable_class_name)


State 108

  383 function_call: callable_expr . argument_list

    '('  shift, and go to state 226

    argument_list  go to state 273


State 109

  427 callable_expr: callable_variable .
  436 variable: callable_variable .

    '('       reduce using rule 427 (callable_expr)
    $default  reduce using rule 436 (variable)


State 110

  296 expr_without_variable: variable . '=' expr
  297                      | variable . '=' '&' variable
  299                      | variable . "+= (T_PLUS_EQUAL)" expr
  300                      | variable . "-= (T_MINUS_EQUAL)" expr
  301                      | variable . "*= (T_MUL_EQUAL)" expr
  302                      | variable . "**= (T_POW_EQUAL)" expr
  303                      | variable . "/= (T_DIV_EQUAL)" expr
  304                      | variable . ".= (T_CONCAT_EQUAL)" expr
  305                      | variable . "%= (T_MOD_EQUAL)" expr
  306                      | variable . "&= (T_AND_EQUAL)" expr
  307                      | variable . "|= (T_OR_EQUAL)" expr
  308                      | variable . "^= (T_XOR_EQUAL)" expr
  309                      | variable . "<<= (T_SL_EQUAL)" expr
  310                      | variable . ">>= (T_SR_EQUAL)" expr
  311                      | variable . "++ (T_INC)"
  313                      | variable . "-- (T_DEC)"
  419 expr: variable .
  424 dereferencable: variable .

    '='                    shift, and go to state 274
    "+= (T_PLUS_EQUAL)"    shift, and go to state 275
    "-= (T_MINUS_EQUAL)"   shift, and go to state 276
    "*= (T_MUL_EQUAL)"     shift, and go to state 277
    "/= (T_DIV_EQUAL)"     shift, and go to state 278
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 279
    "%= (T_MOD_EQUAL)"     shift, and go to state 280
    "&= (T_AND_EQUAL)"     shift, and go to state 281
    "|= (T_OR_EQUAL)"      shift, and go to state 282
    "^= (T_XOR_EQUAL)"     shift, and go to state 283
    "<<= (T_SL_EQUAL)"     shift, and go to state 284
    ">>= (T_SR_EQUAL)"     shift, and go to state 285
    "**= (T_POW_EQUAL)"    shift, and go to state 286
    "++ (T_INC)"           shift, and go to state 287
    "-- (T_DEC)"           shift, and go to state 288

    '['                            reduce using rule 424 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 424 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 424 (dereferencable)
    '{'                            reduce using rule 424 (dereferencable)
    $default                       reduce using rule 419 (expr)


State 111

  430 callable_variable: simple_variable .

    $default  reduce using rule 430 (callable_variable)


State 112

  437 variable: static_member .

    $default  reduce using rule 437 (variable)


State 113

  351 expr_without_variable: internal_functions_in_yacc .

    $default  reduce using rule 351 (expr_without_variable)


State 114

  369 expr_without_variable: "static (T_STATIC)" . function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'
  384 class_name: "static (T_STATIC)" .

    "function (T_FUNCTION)"  shift, and go to state 50

    $default  reduce using rule 384 (class_name)

    function  go to state 160


State 115

   81 namespace_name: "identifier (T_STRING)" .

    $default  reduce using rule 81 (namespace_name)


State 116

   84 name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 212


State 117

  368 expr_without_variable: function . returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    '&'  shift, and go to state 235

    $default  reduce using rule 372 (returns_ref)

    returns_ref  go to state 289


State 118

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  485 internal_functions_in_yacc: "include (T_INCLUDE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 485 (internal_functions_in_yacc)


State 119

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  486 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 486 (internal_functions_in_yacc)


State 120

  487 internal_functions_in_yacc: "eval (T_EVAL)" '(' . expr ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 290
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 121

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  488 internal_functions_in_yacc: "require (T_REQUIRE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 488 (internal_functions_in_yacc)


State 122

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  489 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 489 (internal_functions_in_yacc)


State 123

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  363                      | "print (T_PRINT)" expr .

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 363 (expr_without_variable)


State 124

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  365                      | "yield (T_YIELD)" expr .
  366                      | "yield (T_YIELD)" expr . "=> (T_DOUBLE_ARROW)" expr

    "=> (T_DOUBLE_ARROW)"         shift, and go to state 291
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 365 (expr_without_variable)


State 125

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  367                      | "yield from (T_YIELD_FROM)" expr .

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 367 (expr_without_variable)


State 126

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  332                      | '+' expr .
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 332 (expr_without_variable)


State 127

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  333                      | '-' expr .
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 333 (expr_without_variable)


State 128

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  334                      | '!' expr .
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    $default  reduce using rule 334 (expr_without_variable)


State 129

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  335                      | '~' expr .
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 335 (expr_without_variable)


State 130

  384 class_name: "static (T_STATIC)" .

    $default  reduce using rule 384 (class_name)


State 131

  425 dereferencable: '(' . expr ')'
  428 callable_expr: '(' . expr ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 292
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 132

  426 dereferencable: dereferencable_scalar .
  429 callable_expr: dereferencable_scalar .

    '('       reduce using rule 429 (callable_expr)
    $default  reduce using rule 426 (dereferencable)


State 133

  432 callable_variable: constant . '[' optional_expr ']'

    '['  shift, and go to state 238


State 134

  312 expr_without_variable: "++ (T_INC)" variable .
  424 dereferencable: variable .

    '['                            reduce using rule 424 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 424 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 424 (dereferencable)
    '{'                            reduce using rule 424 (dereferencable)
    $default                       reduce using rule 312 (expr_without_variable)


State 135

  314 expr_without_variable: "-- (T_DEC)" variable .
  424 dereferencable: variable .

    '['                            reduce using rule 424 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 424 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 424 (dereferencable)
    '{'                            reduce using rule 424 (dereferencable)
    $default                       reduce using rule 314 (expr_without_variable)


State 136

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  352                      | "(int) (T_INT_CAST)" expr .

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 352 (expr_without_variable)


State 137

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  353                      | "(double) (T_DOUBLE_CAST)" expr .

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 353 (expr_without_variable)


State 138

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  354                      | "(string) (T_STRING_CAST)" expr .

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 354 (expr_without_variable)


State 139

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  355                      | "(array) (T_ARRAY_CAST)" expr .

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 355 (expr_without_variable)


State 140

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  356                      | "(object) (T_OBJECT_CAST)" expr .

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 356 (expr_without_variable)


State 141

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  357                      | "(bool) (T_BOOL_CAST)" expr .

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 357 (expr_without_variable)


State 142

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  358                      | "(unset) (T_UNSET_CAST)" expr .

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 358 (expr_without_variable)


State 143

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  360                      | '@' expr .

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 360 (expr_without_variable)


State 144

  468 array_pair: '&' . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 293
    simple_variable        go to state 111
    static_member          go to state 112


State 145

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  465 array_pair: expr . "=> (T_DOUBLE_ARROW)" expr
  466           | expr .
  467           | expr . "=> (T_DOUBLE_ARROW)" '&' variable

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 294
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 466 (array_pair)


State 146

  396 dereferencable_scalar: '[' array_pair_list . ']'

    ']'  shift, and go to state 295


State 147

  462 array_pair_list: non_empty_array_pair_list . possible_comma
  463 non_empty_array_pair_list: non_empty_array_pair_list . ',' array_pair

    ','  shift, and go to state 296

    $default  reduce using rule 417 (possible_comma)

    possible_comma  go to state 297


State 148

  464 non_empty_array_pair_list: array_pair .

    $default  reduce using rule 464 (non_empty_array_pair_list)


State 149

  292 anonymous_class: "class (T_CLASS)" . @8 ctor_arguments extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 291 (@8)

    @8  go to state 298


State 150

  385 class_name: name .

    $default  reduce using rule 385 (class_name)


State 151

  294 new_expr: "new (T_NEW)" anonymous_class .

    $default  reduce using rule 294 (new_expr)


State 152

  386 class_name_reference: class_name .
  448 new_variable: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 299

    $default  reduce using rule 386 (class_name_reference)


State 153

  293 new_expr: "new (T_NEW)" class_name_reference . ctor_arguments

    '('  shift, and go to state 226

    $default  reduce using rule 393 (ctor_arguments)

    argument_list   go to state 300
    ctor_arguments  go to state 301


State 154

  444 new_variable: simple_variable .

    $default  reduce using rule 444 (new_variable)


State 155

  387 class_name_reference: new_variable .
  445 new_variable: new_variable . '[' optional_expr ']'
  446             | new_variable . '{' expr '}'
  447             | new_variable . "-> (T_OBJECT_OPERATOR)" property_name
  449             | new_variable . ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable

    '['                            shift, and go to state 302
    "-> (T_OBJECT_OPERATOR)"       shift, and go to state 303
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 304
    '{'                            shift, and go to state 305

    $default  reduce using rule 387 (class_name_reference)


State 156

  298 expr_without_variable: "clone (T_CLONE)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    $default  reduce using rule 298 (expr_without_variable)


State 157

  237 static_var: "variable (T_VARIABLE)" .
  238           | "variable (T_VARIABLE)" . '=' expr

    '='  shift, and go to state 306

    $default  reduce using rule 237 (static_var)


State 158

  141 statement: "static (T_STATIC)" static_var_list . ';'
  235 static_var_list: static_var_list . ',' static_var

    ','  shift, and go to state 307
    ';'  shift, and go to state 308


State 159

  236 static_var_list: static_var .

    $default  reduce using rule 236 (static_var_list)


State 160

  369 expr_without_variable: "static (T_STATIC)" function . returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    '&'  shift, and go to state 235

    $default  reduce using rule 372 (returns_ref)

    returns_ref  go to state 309


State 161

  154 statement: "identifier (T_STRING)" ':' .

    $default  reduce using rule 154 (statement)


State 162

  389 exit_expr: '(' . optional_expr ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 421 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 310
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 163

  359 expr_without_variable: "exit (T_EXIT)" exit_expr .

    $default  reduce using rule 359 (expr_without_variable)


State 164

  205 if_stmt_without_else: "if (T_IF)" '(' . expr ')' statement
  209 alt_if_stmt_without_else: "if (T_IF)" '(' . expr ')' ':' inner_statement_list

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 311
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 165

  142 statement: "echo (T_ECHO)" echo_expr_list . ';'
  284 echo_expr_list: echo_expr_list . ',' echo_expr

    ','  shift, and go to state 312
    ';'  shift, and go to state 313


State 166

  285 echo_expr_list: echo_expr .

    $default  reduce using rule 285 (echo_expr_list)


State 167

  286 echo_expr: expr .
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 286 (echo_expr)


State 168

  134 statement: "do (T_DO)" statement . "while (T_WHILE)" '(' expr ')' ';'

    "while (T_WHILE)"  shift, and go to state 314


State 169

  133 statement: "while (T_WHILE)" '(' . expr ')' while_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 315
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 170

  135 statement: "for (T_FOR)" '(' . for_exprs ';' for_exprs ';' for_exprs ')' for_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 287 (for_exprs)

    namespace_name              go to state 83
    name                        go to state 84
    for_exprs                   go to state 316
    non_empty_for_exprs         go to state 317
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 318
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 171

  146 statement: "foreach (T_FOREACH)" '(' . expr "as (T_AS)" foreach_variable ')' foreach_statement
  147          | "foreach (T_FOREACH)" '(' . expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 319
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 172

  149 statement: "declare (T_DECLARE)" '(' . const_list ')' $@3 declare_statement

    "identifier (T_STRING)"  shift, and go to state 178

    const_list  go to state 320
    const_decl  go to state 180


State 173

  136 statement: "switch (T_SWITCH)" '(' . expr ')' switch_case_list

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 321
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 174

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  422 optional_expr: expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 422 (optional_expr)


State 175

  137 statement: "break (T_BREAK)" optional_expr . ';'

    ';'  shift, and go to state 322


State 176

  138 statement: "continue (T_CONTINUE)" optional_expr . ';'

    ';'  shift, and go to state 323


State 177

  153 statement: "goto (T_GOTO)" "identifier (T_STRING)" . ';'

    ';'  shift, and go to state 324


State 178

  283 const_decl: "identifier (T_STRING)" . '=' expr backup_doc_comment

    '='  shift, and go to state 325


State 179

  101 top_statement: "const (T_CONST)" const_list . ';'
  120 const_list: const_list . ',' const_decl

    ','  shift, and go to state 326
    ';'  shift, and go to state 327


State 180

  121 const_list: const_decl .

    $default  reduce using rule 121 (const_list)


State 181

  139 statement: "return (T_RETURN)" optional_expr . ';'

    ';'  shift, and go to state 328


State 182

  151 statement: "try (T_TRY)" '{' . inner_statement_list '}' catch_list finally_statement

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 329


State 183

  152 statement: "throw (T_THROW)" expr . ';'
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ';'                           shift, and go to state 330


State 184

  102 use_type: "function (T_FUNCTION)" .

    $default  reduce using rule 102 (use_type)


State 185

  103 use_type: "const (T_CONST)" .

    $default  reduce using rule 103 (use_type)


State 186

  107 mixed_group_use_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations '}'
  119 use_declaration: "\\ (T_NS_SEPARATOR)" . unprefixed_use_declaration

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name              go to state 331
    unprefixed_use_declaration  go to state 332


State 187

   82 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  106 mixed_group_use_declaration: namespace_name . "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations '}'
  116 unprefixed_use_declaration: namespace_name .
  117                           | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 333
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 334

    $default  reduce using rule 116 (unprefixed_use_declaration)


State 188

   98 top_statement: "use (T_USE)" use_type . group_use_declaration ';'
  100              | "use (T_USE)" use_type . use_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 335

    namespace_name              go to state 336
    group_use_declaration       go to state 337
    use_declarations            go to state 338
    unprefixed_use_declaration  go to state 191
    use_declaration             go to state 192


State 189

   97 top_statement: "use (T_USE)" mixed_group_use_declaration . ';'

    ';'  shift, and go to state 339


State 190

   99 top_statement: "use (T_USE)" use_declarations . ';'
  112 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 340
    ';'  shift, and go to state 341


State 191

  118 use_declaration: unprefixed_use_declaration .

    $default  reduce using rule 118 (use_declaration)


State 192

  113 use_declarations: use_declaration .

    $default  reduce using rule 113 (use_declarations)


State 193

  140 statement: "global (T_GLOBAL)" global_var_list . ';'
  232 global_var_list: global_var_list . ',' global_var

    ','  shift, and go to state 342
    ';'  shift, and go to state 343


State 194

  233 global_var_list: global_var .

    $default  reduce using rule 233 (global_var_list)


State 195

  234 global_var: simple_variable .

    $default  reduce using rule 234 (global_var)


State 196

  145 statement: "unset (T_UNSET)" '(' . unset_variables ')' ';'

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    unset_variables        go to state 344
    unset_variable         go to state 345
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 346
    simple_variable        go to state 111
    static_member          go to state 112


State 197

  483 internal_functions_in_yacc: "isset (T_ISSET)" '(' . isset_variables ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 347
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113
    isset_variables             go to state 348
    isset_variable              go to state 349


State 198

  484 internal_functions_in_yacc: "empty (T_EMPTY)" '(' . expr ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 350
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 199

   91 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 351


State 200

  170 class_declaration_statement: "class (T_CLASS)" @5 . "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 352


State 201

  176 trait_declaration_statement: "trait (T_TRAIT)" @6 . "identifier (T_STRING)" backup_doc_comment '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 353


State 202

  178 interface_declaration_statement: "interface (T_INTERFACE)" @7 . "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 354


State 203

  295 expr_without_variable: "list (T_LIST)" '(' . assignment_list ')' '=' expr

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 355
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    $default  reduce using rule 460 (assignment_list_element)

    namespace_name           go to state 83
    name                     go to state 84
    function_call            go to state 100
    class_name               go to state 101
    dereferencable_scalar    go to state 132
    constant                 go to state 133
    variable_class_name      go to state 106
    dereferencable           go to state 107
    callable_expr            go to state 108
    callable_variable        go to state 109
    variable                 go to state 356
    simple_variable          go to state 111
    static_member            go to state 112
    assignment_list          go to state 357
    assignment_list_element  go to state 358


State 204

  395 dereferencable_scalar: "array (T_ARRAY)" '(' . array_pair_list ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '&'                                           shift, and go to state 144
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 461 (array_pair_list)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 145
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    array_pair_list             go to state 359
    non_empty_array_pair_list   go to state 147
    array_pair                  go to state 148
    internal_functions_in_yacc  go to state 113


State 205

  473 encaps_var: "variable (T_VARIABLE)" .
  474           | "variable (T_VARIABLE)" . '[' encaps_var_offset ']'
  475           | "variable (T_VARIABLE)" . "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"

    '['                       shift, and go to state 360
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 361

    $default  reduce using rule 473 (encaps_var)


State 206

  408 scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"
  472 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 205
    "heredoc end (T_END_HEREDOC)"      shift, and go to state 362
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                shift, and go to state 209

    encaps_var  go to state 363


State 207

  409 scalar: "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 409 (scalar)


State 208

  476 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . expr '}'
  477           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . "variable name (T_STRING_VARNAME)" '}'
  478           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . "variable name (T_STRING_VARNAME)" '[' expr ']' '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "variable name (T_STRING_VARNAME)"            shift, and go to state 364
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 365
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 209

  479 encaps_var: "{$ (T_CURLY_OPEN)" . variable '}'

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 366
    simple_variable        go to state 111
    static_member          go to state 112


State 210

  411 scalar: "heredoc start (T_START_HEREDOC)" encaps_list . "heredoc end (T_END_HEREDOC)"
  469 encaps_list: encaps_list . encaps_var
  470            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 367
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 368
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209

    encaps_var  go to state 369


State 211

  471 encaps_list: encaps_var .

    $default  reduce using rule 471 (encaps_list)


State 212

   84 name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 370


State 213

   82 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   92 top_statement: "namespace (T_NAMESPACE)" namespace_name . ';'
   94              | "namespace (T_NAMESPACE)" namespace_name . $@1 '{' top_statement_list '}'

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225
    ';'                    shift, and go to state 371

    $default  reduce using rule 93 ($@1)

    $@1  go to state 372


State 214

   96 top_statement: "namespace (T_NAMESPACE)" $@2 . '{' top_statement_list '}'

    '{'  shift, and go to state 373


State 215

   82 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   85 name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 85 (name)


State 216

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  346                      | '(' expr . ')'
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  425 dereferencable: '(' expr . ')'
  428 callable_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ')'                           shift, and go to state 374


State 217

  122 inner_statement_list: inner_statement_list . inner_statement
  130 statement: '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 376
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 218

  391 backticks_expr: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .
  472 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 205
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                shift, and go to state 209

    $default  reduce using rule 391 (backticks_expr)

    encaps_var  go to state 363


State 219

  362 expr_without_variable: '`' backticks_expr . '`'

    '`'  shift, and go to state 383


State 220

  392 backticks_expr: encaps_list .
  469 encaps_list: encaps_list . encaps_var
  470            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 367
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209

    $default  reduce using rule 392 (backticks_expr)

    encaps_var  go to state 369


State 221

  472 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 205
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                shift, and go to state 209

    encaps_var  go to state 363


State 222

  410 scalar: '"' encaps_list . '"'
  469 encaps_list: encaps_list . encaps_var
  470            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 205
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 367
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 208
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 209
    '"'                                                         shift, and go to state 384

    encaps_var  go to state 369


State 223

  440 simple_variable: '$' '{' . expr '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 385
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 224

  441 simple_variable: '$' simple_variable .

    $default  reduce using rule 441 (simple_variable)


State 225

   82 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 386


State 226

  226 argument_list: '(' . ')'
  227              | '(' . non_empty_argument_list ')'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    "... (T_ELLIPSIS)"                            shift, and go to state 387
    '('                                           shift, and go to state 77
    ')'                                           shift, and go to state 388
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    non_empty_argument_list     go to state 389
    argument                    go to state 390
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 391
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 227

  380 function_call: name argument_list .

    $default  reduce using rule 380 (function_call)


State 228

  168 class_declaration_statement: class_modifiers "class (T_CLASS)" . @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 167 (@4)

    @4  go to state 392


State 229

  172 class_modifiers: class_modifiers class_modifier .

    $default  reduce using rule 172 (class_modifiers)


State 230

  206 if_stmt_without_else: if_stmt_without_else "elseif (T_ELSEIF)" . '(' expr ')' statement

    '('  shift, and go to state 393


State 231

  208 if_stmt: if_stmt_without_else "else (T_ELSE)" . statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 394
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 232

  210 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" . '(' expr ')' ':' inner_statement_list

    '('  shift, and go to state 395


State 233

  212 alt_if_stmt: alt_if_stmt_without_else "else (T_ELSE)" . ':' inner_statement_list "endif (T_ENDIF)" ';'

    ':'  shift, and go to state 396


State 234

  211 alt_if_stmt: alt_if_stmt_without_else "endif (T_ENDIF)" . ';'

    ';'  shift, and go to state 397


State 235

  373 returns_ref: '&' .

    $default  reduce using rule 373 (returns_ref)


State 236

  162 function_declaration_statement: function returns_ref . "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}'
  368 expr_without_variable: function returns_ref . '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 398
    '('                      shift, and go to state 399


State 237

  381 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . member_name argument_list
  415 constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . identifier
  442 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . simple_variable

    "include (T_INCLUDE)"                shift, and go to state 400
    "include_once (T_INCLUDE_ONCE)"      shift, and go to state 401
    "eval (T_EVAL)"                      shift, and go to state 402
    "require (T_REQUIRE)"                shift, and go to state 403
    "require_once (T_REQUIRE_ONCE)"      shift, and go to state 404
    "or (T_LOGICAL_OR)"                  shift, and go to state 405
    "xor (T_LOGICAL_XOR)"                shift, and go to state 406
    "and (T_LOGICAL_AND)"                shift, and go to state 407
    "print (T_PRINT)"                    shift, and go to state 408
    "yield (T_YIELD)"                    shift, and go to state 409
    "instanceof (T_INSTANCEOF)"          shift, and go to state 410
    "new (T_NEW)"                        shift, and go to state 411
    "clone (T_CLONE)"                    shift, and go to state 412
    "elseif (T_ELSEIF)"                  shift, and go to state 413
    "else (T_ELSE)"                      shift, and go to state 414
    "endif (T_ENDIF)"                    shift, and go to state 415
    "static (T_STATIC)"                  shift, and go to state 416
    "abstract (T_ABSTRACT)"              shift, and go to state 417
    "final (T_FINAL)"                    shift, and go to state 418
    "private (T_PRIVATE)"                shift, and go to state 419
    "protected (T_PROTECTED)"            shift, and go to state 420
    "public (T_PUBLIC)"                  shift, and go to state 421
    "identifier (T_STRING)"              shift, and go to state 422
    "variable (T_VARIABLE)"              shift, and go to state 35
    "exit (T_EXIT)"                      shift, and go to state 423
    "if (T_IF)"                          shift, and go to state 424
    "echo (T_ECHO)"                      shift, and go to state 425
    "do (T_DO)"                          shift, and go to state 426
    "while (T_WHILE)"                    shift, and go to state 427
    "endwhile (T_ENDWHILE)"              shift, and go to state 428
    "for (T_FOR)"                        shift, and go to state 429
    "endfor (T_ENDFOR)"                  shift, and go to state 430
    "foreach (T_FOREACH)"                shift, and go to state 431
    "endforeach (T_ENDFOREACH)"          shift, and go to state 432
    "declare (T_DECLARE)"                shift, and go to state 433
    "enddeclare (T_ENDDECLARE)"          shift, and go to state 434
    "as (T_AS)"                          shift, and go to state 435
    "switch (T_SWITCH)"                  shift, and go to state 436
    "endswitch (T_ENDSWITCH)"            shift, and go to state 437
    "case (T_CASE)"                      shift, and go to state 438
    "default (T_DEFAULT)"                shift, and go to state 439
    "break (T_BREAK)"                    shift, and go to state 440
    "continue (T_CONTINUE)"              shift, and go to state 441
    "goto (T_GOTO)"                      shift, and go to state 442
    "function (T_FUNCTION)"              shift, and go to state 443
    "const (T_CONST)"                    shift, and go to state 444
    "return (T_RETURN)"                  shift, and go to state 445
    "try (T_TRY)"                        shift, and go to state 446
    "catch (T_CATCH)"                    shift, and go to state 447
    "finally (T_FINALLY)"                shift, and go to state 448
    "throw (T_THROW)"                    shift, and go to state 449
    "use (T_USE)"                        shift, and go to state 450
    "insteadof (T_INSTEADOF)"            shift, and go to state 451
    "global (T_GLOBAL)"                  shift, and go to state 452
    "var (T_VAR)"                        shift, and go to state 453
    "unset (T_UNSET)"                    shift, and go to state 454
    "isset (T_ISSET)"                    shift, and go to state 455
    "empty (T_EMPTY)"                    shift, and go to state 456
    "__halt_compiler (T_HALT_COMPILER)"  shift, and go to state 457
    "class (T_CLASS)"                    shift, and go to state 458
    "trait (T_TRAIT)"                    shift, and go to state 459
    "interface (T_INTERFACE)"            shift, and go to state 460
    "extends (T_EXTENDS)"                shift, and go to state 461
    "implements (T_IMPLEMENTS)"          shift, and go to state 462
    "list (T_LIST)"                      shift, and go to state 463
    "array (T_ARRAY)"                    shift, and go to state 464
    "callable (T_CALLABLE)"              shift, and go to state 465
    "__LINE__ (T_LINE)"                  shift, and go to state 466
    "__FILE__ (T_FILE)"                  shift, and go to state 467
    "__DIR__ (T_DIR)"                    shift, and go to state 468
    "__CLASS__ (T_CLASS_C)"              shift, and go to state 469
    "__TRAIT__ (T_TRAIT_C)"              shift, and go to state 470
    "__METHOD__ (T_METHOD_C)"            shift, and go to state 471
    "__FUNCTION__ (T_FUNC_C)"            shift, and go to state 472
    "namespace (T_NAMESPACE)"            shift, and go to state 473
    "__NAMESPACE__ (T_NS_C)"             shift, and go to state 474
    '{'                                  shift, and go to state 475
    '$'                                  shift, and go to state 82

    reserved_non_modifiers  go to state 476
    semi_reserved           go to state 477
    identifier              go to state 478
    simple_variable         go to state 479
    member_name             go to state 480


State 238

  432 callable_variable: constant '[' . optional_expr ']'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 421 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 481
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 239

  317 expr_without_variable: expr "or (T_LOGICAL_OR)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 482
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 240

  319 expr_without_variable: expr "xor (T_LOGICAL_XOR)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 483
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 241

  318 expr_without_variable: expr "and (T_LOGICAL_AND)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 484
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 242

  348 expr_without_variable: expr '?' . expr ':' expr
  349                      | expr '?' . ':' expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 485
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 486
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 243

  350 expr_without_variable: expr "?? (T_COALESCE)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 487
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 244

  315 expr_without_variable: expr "|| (T_BOOLEAN_OR)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 488
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 245

  316 expr_without_variable: expr "&& (T_BOOLEAN_AND)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 489
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 246

  320 expr_without_variable: expr '|' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 490
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 247

  322 expr_without_variable: expr '^' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 491
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 248

  321 expr_without_variable: expr '&' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 492
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 249

  338 expr_without_variable: expr "== (T_IS_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 493
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 250

  339 expr_without_variable: expr "!= (T_IS_NOT_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 494
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 251

  336 expr_without_variable: expr "=== (T_IS_IDENTICAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 495
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 252

  337 expr_without_variable: expr "!== (T_IS_NOT_IDENTICAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 496
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 253

  344 expr_without_variable: expr "<=> (T_SPACESHIP)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 497
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 254

  340 expr_without_variable: expr '<' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 498
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 255

  341 expr_without_variable: expr "<= (T_IS_SMALLER_OR_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 499
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 256

  342 expr_without_variable: expr '>' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 500
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 257

  343 expr_without_variable: expr ">= (T_IS_GREATER_OR_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 501
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 258

  330 expr_without_variable: expr "<< (T_SL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 502
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 259

  331 expr_without_variable: expr ">> (T_SR)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 503
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 260

  324 expr_without_variable: expr '+' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 504
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 261

  325 expr_without_variable: expr '-' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 505
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 262

  323 expr_without_variable: expr '.' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 506
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 263

  326 expr_without_variable: expr '*' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 507
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 264

  328 expr_without_variable: expr '/' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 508
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 265

  329 expr_without_variable: expr '%' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 509
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 266

  345 expr_without_variable: expr "instanceof (T_INSTANCEOF)" . class_name_reference

    "static (T_STATIC)"        shift, and go to state 130
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 35
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76
    '$'                        shift, and go to state 82

    namespace_name        go to state 83
    name                  go to state 150
    class_name            go to state 152
    class_name_reference  go to state 510
    simple_variable       go to state 154
    new_variable          go to state 155


State 267

  327 expr_without_variable: expr "** (T_POW)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 511
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 268

  144 statement: expr ';' .

    $default  reduce using rule 144 (statement)


State 269

  382 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . member_name argument_list
  416 constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . identifier
  443 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . simple_variable

    "include (T_INCLUDE)"                shift, and go to state 400
    "include_once (T_INCLUDE_ONCE)"      shift, and go to state 401
    "eval (T_EVAL)"                      shift, and go to state 402
    "require (T_REQUIRE)"                shift, and go to state 403
    "require_once (T_REQUIRE_ONCE)"      shift, and go to state 404
    "or (T_LOGICAL_OR)"                  shift, and go to state 405
    "xor (T_LOGICAL_XOR)"                shift, and go to state 406
    "and (T_LOGICAL_AND)"                shift, and go to state 407
    "print (T_PRINT)"                    shift, and go to state 408
    "yield (T_YIELD)"                    shift, and go to state 409
    "instanceof (T_INSTANCEOF)"          shift, and go to state 410
    "new (T_NEW)"                        shift, and go to state 411
    "clone (T_CLONE)"                    shift, and go to state 412
    "elseif (T_ELSEIF)"                  shift, and go to state 413
    "else (T_ELSE)"                      shift, and go to state 414
    "endif (T_ENDIF)"                    shift, and go to state 415
    "static (T_STATIC)"                  shift, and go to state 416
    "abstract (T_ABSTRACT)"              shift, and go to state 417
    "final (T_FINAL)"                    shift, and go to state 418
    "private (T_PRIVATE)"                shift, and go to state 419
    "protected (T_PROTECTED)"            shift, and go to state 420
    "public (T_PUBLIC)"                  shift, and go to state 421
    "identifier (T_STRING)"              shift, and go to state 422
    "variable (T_VARIABLE)"              shift, and go to state 35
    "exit (T_EXIT)"                      shift, and go to state 423
    "if (T_IF)"                          shift, and go to state 424
    "echo (T_ECHO)"                      shift, and go to state 425
    "do (T_DO)"                          shift, and go to state 426
    "while (T_WHILE)"                    shift, and go to state 427
    "endwhile (T_ENDWHILE)"              shift, and go to state 428
    "for (T_FOR)"                        shift, and go to state 429
    "endfor (T_ENDFOR)"                  shift, and go to state 430
    "foreach (T_FOREACH)"                shift, and go to state 431
    "endforeach (T_ENDFOREACH)"          shift, and go to state 432
    "declare (T_DECLARE)"                shift, and go to state 433
    "enddeclare (T_ENDDECLARE)"          shift, and go to state 434
    "as (T_AS)"                          shift, and go to state 435
    "switch (T_SWITCH)"                  shift, and go to state 436
    "endswitch (T_ENDSWITCH)"            shift, and go to state 437
    "case (T_CASE)"                      shift, and go to state 438
    "default (T_DEFAULT)"                shift, and go to state 439
    "break (T_BREAK)"                    shift, and go to state 440
    "continue (T_CONTINUE)"              shift, and go to state 441
    "goto (T_GOTO)"                      shift, and go to state 442
    "function (T_FUNCTION)"              shift, and go to state 443
    "const (T_CONST)"                    shift, and go to state 444
    "return (T_RETURN)"                  shift, and go to state 445
    "try (T_TRY)"                        shift, and go to state 446
    "catch (T_CATCH)"                    shift, and go to state 447
    "finally (T_FINALLY)"                shift, and go to state 448
    "throw (T_THROW)"                    shift, and go to state 449
    "use (T_USE)"                        shift, and go to state 450
    "insteadof (T_INSTEADOF)"            shift, and go to state 451
    "global (T_GLOBAL)"                  shift, and go to state 452
    "var (T_VAR)"                        shift, and go to state 453
    "unset (T_UNSET)"                    shift, and go to state 454
    "isset (T_ISSET)"                    shift, and go to state 455
    "empty (T_EMPTY)"                    shift, and go to state 456
    "__halt_compiler (T_HALT_COMPILER)"  shift, and go to state 457
    "class (T_CLASS)"                    shift, and go to state 458
    "trait (T_TRAIT)"                    shift, and go to state 459
    "interface (T_INTERFACE)"            shift, and go to state 460
    "extends (T_EXTENDS)"                shift, and go to state 461
    "implements (T_IMPLEMENTS)"          shift, and go to state 462
    "list (T_LIST)"                      shift, and go to state 463
    "array (T_ARRAY)"                    shift, and go to state 464
    "callable (T_CALLABLE)"              shift, and go to state 465
    "__LINE__ (T_LINE)"                  shift, and go to state 466
    "__FILE__ (T_FILE)"                  shift, and go to state 467
    "__DIR__ (T_DIR)"                    shift, and go to state 468
    "__CLASS__ (T_CLASS_C)"              shift, and go to state 469
    "__TRAIT__ (T_TRAIT_C)"              shift, and go to state 470
    "__METHOD__ (T_METHOD_C)"            shift, and go to state 471
    "__FUNCTION__ (T_FUNC_C)"            shift, and go to state 472
    "namespace (T_NAMESPACE)"            shift, and go to state 473
    "__NAMESPACE__ (T_NS_C)"             shift, and go to state 474
    '{'                                  shift, and go to state 475
    '$'                                  shift, and go to state 82

    reserved_non_modifiers  go to state 476
    semi_reserved           go to state 477
    identifier              go to state 512
    simple_variable         go to state 513
    member_name             go to state 514


State 270

  431 callable_variable: dereferencable '[' . optional_expr ']'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 421 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 515
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 271

  434 callable_variable: dereferencable "-> (T_OBJECT_OPERATOR)" . property_name argument_list
  438 variable: dereferencable "-> (T_OBJECT_OPERATOR)" . property_name

    "identifier (T_STRING)"  shift, and go to state 516
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 517
    '$'                      shift, and go to state 82

    simple_variable  go to state 518
    property_name    go to state 519


State 272

  433 callable_variable: dereferencable '{' . expr '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 520
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 273

  383 function_call: callable_expr argument_list .

    $default  reduce using rule 383 (function_call)


State 274

  296 expr_without_variable: variable '=' . expr
  297                      | variable '=' . '&' variable

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '&'                                           shift, and go to state 521
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 522
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 275

  299 expr_without_variable: variable "+= (T_PLUS_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 523
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 276

  300 expr_without_variable: variable "-= (T_MINUS_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 524
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 277

  301 expr_without_variable: variable "*= (T_MUL_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 525
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 278

  303 expr_without_variable: variable "/= (T_DIV_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 526
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 279

  304 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 527
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 280

  305 expr_without_variable: variable "%= (T_MOD_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 528
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 281

  306 expr_without_variable: variable "&= (T_AND_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 529
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 282

  307 expr_without_variable: variable "|= (T_OR_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 530
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 283

  308 expr_without_variable: variable "^= (T_XOR_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 531
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 284

  309 expr_without_variable: variable "<<= (T_SL_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 532
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 285

  310 expr_without_variable: variable ">>= (T_SR_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 533
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 286

  302 expr_without_variable: variable "**= (T_POW_EQUAL)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 534
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 287

  311 expr_without_variable: variable "++ (T_INC)" .

    $default  reduce using rule 311 (expr_without_variable)


State 288

  313 expr_without_variable: variable "-- (T_DEC)" .

    $default  reduce using rule 313 (expr_without_variable)


State 289

  368 expr_without_variable: function returns_ref . '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    '('  shift, and go to state 399


State 290

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  487 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ')'                           shift, and go to state 535


State 291

  366 expr_without_variable: "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 536
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 292

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  425 dereferencable: '(' expr . ')'
  428 callable_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ')'                           shift, and go to state 537


State 293

  424 dereferencable: variable .
  468 array_pair: '&' variable .

    ','       reduce using rule 468 (array_pair)
    ')'       reduce using rule 468 (array_pair)
    ']'       reduce using rule 468 (array_pair)
    $default  reduce using rule 424 (dereferencable)


State 294

  465 array_pair: expr "=> (T_DOUBLE_ARROW)" . expr
  467           | expr "=> (T_DOUBLE_ARROW)" . '&' variable

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '&'                                           shift, and go to state 538
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 539
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 295

  396 dereferencable_scalar: '[' array_pair_list ']' .

    $default  reduce using rule 396 (dereferencable_scalar)


State 296

  418 possible_comma: ',' .
  463 non_empty_array_pair_list: non_empty_array_pair_list ',' . array_pair

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '&'                                           shift, and go to state 144
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 418 (possible_comma)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 145
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    array_pair                  go to state 540
    internal_functions_in_yacc  go to state 113


State 297

  462 array_pair_list: non_empty_array_pair_list possible_comma .

    $default  reduce using rule 462 (array_pair_list)


State 298

  292 anonymous_class: "class (T_CLASS)" @8 . ctor_arguments extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    '('  shift, and go to state 226

    $default  reduce using rule 393 (ctor_arguments)

    argument_list   go to state 300
    ctor_arguments  go to state 541


State 299

  448 new_variable: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . simple_variable

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 82

    simple_variable  go to state 542


State 300

  394 ctor_arguments: argument_list .

    $default  reduce using rule 394 (ctor_arguments)


State 301

  293 new_expr: "new (T_NEW)" class_name_reference ctor_arguments .

    $default  reduce using rule 293 (new_expr)


State 302

  445 new_variable: new_variable '[' . optional_expr ']'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 421 (optional_expr)

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 174
    optional_expr               go to state 543
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 303

  447 new_variable: new_variable "-> (T_OBJECT_OPERATOR)" . property_name

    "identifier (T_STRING)"  shift, and go to state 516
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 517
    '$'                      shift, and go to state 82

    simple_variable  go to state 518
    property_name    go to state 544


State 304

  449 new_variable: new_variable ":: (T_PAAMAYIM_NEKUDOTAYIM)" . simple_variable

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 82

    simple_variable  go to state 545


State 305

  446 new_variable: new_variable '{' . expr '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 546
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 306

  238 static_var: "variable (T_VARIABLE)" '=' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 547
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 307

  235 static_var_list: static_var_list ',' . static_var

    "variable (T_VARIABLE)"  shift, and go to state 157

    static_var  go to state 548


State 308

  141 statement: "static (T_STATIC)" static_var_list ';' .

    $default  reduce using rule 141 (statement)


State 309

  369 expr_without_variable: "static (T_STATIC)" function returns_ref . '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    '('  shift, and go to state 549


State 310

  389 exit_expr: '(' optional_expr . ')'

    ')'  shift, and go to state 550


State 311

  205 if_stmt_without_else: "if (T_IF)" '(' expr . ')' statement
  209 alt_if_stmt_without_else: "if (T_IF)" '(' expr . ')' ':' inner_statement_list
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ')'                           shift, and go to state 551


State 312

  284 echo_expr_list: echo_expr_list ',' . echo_expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    echo_expr                   go to state 552
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 167
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 313

  142 statement: "echo (T_ECHO)" echo_expr_list ';' .

    $default  reduce using rule 142 (statement)


State 314

  134 statement: "do (T_DO)" statement "while (T_WHILE)" . '(' expr ')' ';'

    '('  shift, and go to state 553


State 315

  133 statement: "while (T_WHILE)" '(' expr . ')' while_statement
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ')'                           shift, and go to state 554


State 316

  135 statement: "for (T_FOR)" '(' for_exprs . ';' for_exprs ';' for_exprs ')' for_statement

    ';'  shift, and go to state 555


State 317

  288 for_exprs: non_empty_for_exprs .
  289 non_empty_for_exprs: non_empty_for_exprs . ',' expr

    ','  shift, and go to state 556

    $default  reduce using rule 288 (for_exprs)


State 318

  290 non_empty_for_exprs: expr .
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 290 (non_empty_for_exprs)


State 319

  146 statement: "foreach (T_FOREACH)" '(' expr . "as (T_AS)" foreach_variable ')' foreach_statement
  147          | "foreach (T_FOREACH)" '(' expr . "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    "as (T_AS)"                   shift, and go to state 557


State 320

  120 const_list: const_list . ',' const_decl
  149 statement: "declare (T_DECLARE)" '(' const_list . ')' $@3 declare_statement

    ','  shift, and go to state 326
    ')'  shift, and go to state 558


State 321

  136 statement: "switch (T_SWITCH)" '(' expr . ')' switch_case_list
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ')'                           shift, and go to state 559


State 322

  137 statement: "break (T_BREAK)" optional_expr ';' .

    $default  reduce using rule 137 (statement)


State 323

  138 statement: "continue (T_CONTINUE)" optional_expr ';' .

    $default  reduce using rule 138 (statement)


State 324

  153 statement: "goto (T_GOTO)" "identifier (T_STRING)" ';' .

    $default  reduce using rule 153 (statement)


State 325

  283 const_decl: "identifier (T_STRING)" '=' . expr backup_doc_comment

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 560
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 326

  120 const_list: const_list ',' . const_decl

    "identifier (T_STRING)"  shift, and go to state 178

    const_decl  go to state 561


State 327

  101 top_statement: "const (T_CONST)" const_list ';' .

    $default  reduce using rule 101 (top_statement)


State 328

  139 statement: "return (T_RETURN)" optional_expr ';' .

    $default  reduce using rule 139 (statement)


State 329

  122 inner_statement_list: inner_statement_list . inner_statement
  151 statement: "try (T_TRY)" '{' inner_statement_list . '}' catch_list finally_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 562
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 330

  152 statement: "throw (T_THROW)" expr ';' .

    $default  reduce using rule 152 (statement)


State 331

   82 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  107 mixed_group_use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name . "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations '}'
  116 unprefixed_use_declaration: namespace_name .
  117                           | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 333
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 563

    $default  reduce using rule 116 (unprefixed_use_declaration)


State 332

  119 use_declaration: "\\ (T_NS_SEPARATOR)" unprefixed_use_declaration .

    $default  reduce using rule 119 (use_declaration)


State 333

  117 unprefixed_use_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 564


State 334

   82 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"
  106 mixed_group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" . '{' inline_use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 386
    '{'                      shift, and go to state 565


State 335

  105 group_use_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name "\\ (T_NS_SEPARATOR)" '{' unprefixed_use_declarations '}'
  119 use_declaration: "\\ (T_NS_SEPARATOR)" . unprefixed_use_declaration

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name              go to state 566
    unprefixed_use_declaration  go to state 332


State 336

   82 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  104 group_use_declaration: namespace_name . "\\ (T_NS_SEPARATOR)" '{' unprefixed_use_declarations '}'
  116 unprefixed_use_declaration: namespace_name .
  117                           | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 333
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 567

    $default  reduce using rule 116 (unprefixed_use_declaration)


State 337

   98 top_statement: "use (T_USE)" use_type group_use_declaration . ';'

    ';'  shift, and go to state 568


State 338

  100 top_statement: "use (T_USE)" use_type use_declarations . ';'
  112 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 340
    ';'  shift, and go to state 569


State 339

   97 top_statement: "use (T_USE)" mixed_group_use_declaration ';' .

    $default  reduce using rule 97 (top_statement)


State 340

  112 use_declarations: use_declarations ',' . use_declaration

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 570

    namespace_name              go to state 571
    unprefixed_use_declaration  go to state 191
    use_declaration             go to state 572


State 341

   99 top_statement: "use (T_USE)" use_declarations ';' .

    $default  reduce using rule 99 (top_statement)


State 342

  232 global_var_list: global_var_list ',' . global_var

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 82

    global_var       go to state 573
    simple_variable  go to state 195


State 343

  140 statement: "global (T_GLOBAL)" global_var_list ';' .

    $default  reduce using rule 140 (statement)


State 344

  145 statement: "unset (T_UNSET)" '(' unset_variables . ')' ';'
  160 unset_variables: unset_variables . ',' unset_variable

    ','  shift, and go to state 574
    ')'  shift, and go to state 575


State 345

  159 unset_variables: unset_variable .

    $default  reduce using rule 159 (unset_variables)


State 346

  161 unset_variable: variable .
  424 dereferencable: variable .

    ','       reduce using rule 161 (unset_variable)
    ')'       reduce using rule 161 (unset_variable)
    $default  reduce using rule 424 (dereferencable)


State 347

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  492 isset_variable: expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 492 (isset_variable)


State 348

  483 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables . ')'
  491 isset_variables: isset_variables . ',' isset_variable

    ','  shift, and go to state 576
    ')'  shift, and go to state 577


State 349

  490 isset_variables: isset_variable .

    $default  reduce using rule 490 (isset_variables)


State 350

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  484 internal_functions_in_yacc: "empty (T_EMPTY)" '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ')'                           shift, and go to state 578


State 351

   91 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 579


State 352

  170 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" . extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 580

    $default  reduce using rule 179 (extends_from)

    extends_from  go to state 581


State 353

  176 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" . backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 582


State 354

  178 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" . interface_extends_list backup_doc_comment '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 583

    $default  reduce using rule 181 (interface_extends_list)

    interface_extends_list  go to state 584


State 355

  459 assignment_list_element: "list (T_LIST)" . '(' assignment_list ')'

    '('  shift, and go to state 585


State 356

  424 dereferencable: variable .
  458 assignment_list_element: variable .

    ','       reduce using rule 458 (assignment_list_element)
    ')'       reduce using rule 458 (assignment_list_element)
    $default  reduce using rule 424 (dereferencable)


State 357

  295 expr_without_variable: "list (T_LIST)" '(' assignment_list . ')' '=' expr
  456 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 586
    ')'  shift, and go to state 587


State 358

  457 assignment_list: assignment_list_element .

    $default  reduce using rule 457 (assignment_list)


State 359

  395 dereferencable_scalar: "array (T_ARRAY)" '(' array_pair_list . ')'

    ')'  shift, and go to state 588


State 360

  474 encaps_var: "variable (T_VARIABLE)" '[' . encaps_var_offset ']'

    "identifier (T_STRING)"  shift, and go to state 589
    "variable (T_VARIABLE)"  shift, and go to state 590
    "number (T_NUM_STRING)"  shift, and go to state 591

    encaps_var_offset  go to state 592


State 361

  475 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 593


State 362

  408 scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 408 (scalar)


State 363

  472 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var .

    $default  reduce using rule 472 (encaps_list)


State 364

  477 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" . '}'
  478           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" . '[' expr ']' '}'

    '['  shift, and go to state 594
    '}'  shift, and go to state 595


State 365

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  476 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    '}'                           shift, and go to state 596


State 366

  424 dereferencable: variable .
  479 encaps_var: "{$ (T_CURLY_OPEN)" variable . '}'

    '}'  shift, and go to state 597

    $default  reduce using rule 424 (dereferencable)


State 367

  470 encaps_list: encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .

    $default  reduce using rule 470 (encaps_list)


State 368

  411 scalar: "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 411 (scalar)


State 369

  469 encaps_list: encaps_list encaps_var .

    $default  reduce using rule 469 (encaps_list)


State 370

   82 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   84 name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 84 (name)


State 371

   92 top_statement: "namespace (T_NAMESPACE)" namespace_name ';' .

    $default  reduce using rule 92 (top_statement)


State 372

   94 top_statement: "namespace (T_NAMESPACE)" namespace_name $@1 . '{' top_statement_list '}'

    '{'  shift, and go to state 598


State 373

   96 top_statement: "namespace (T_NAMESPACE)" $@2 '{' . top_statement_list '}'

    $default  reduce using rule 80 (top_statement_list)

    top_statement_list  go to state 599


State 374

  346 expr_without_variable: '(' expr ')' .
  425 dereferencable: '(' expr ')' .
  428 callable_expr: '(' expr ')' .

    '['                            reduce using rule 425 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 425 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 425 (dereferencable)
    '('                            reduce using rule 428 (callable_expr)
    '{'                            reduce using rule 425 (dereferencable)
    $default                       reduce using rule 346 (expr_without_variable)


State 375

  129 inner_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 600


State 376

  130 statement: '{' inner_statement_list '}' .

    $default  reduce using rule 130 (statement)


State 377

  122 inner_statement_list: inner_statement_list inner_statement .

    $default  reduce using rule 122 (inner_statement_list)


State 378

  124 inner_statement: statement .

    $default  reduce using rule 124 (inner_statement)


State 379

  125 inner_statement: function_declaration_statement .

    $default  reduce using rule 125 (inner_statement)


State 380

  126 inner_statement: class_declaration_statement .

    $default  reduce using rule 126 (inner_statement)


State 381

  127 inner_statement: trait_declaration_statement .

    $default  reduce using rule 127 (inner_statement)


State 382

  128 inner_statement: interface_declaration_statement .

    $default  reduce using rule 128 (inner_statement)


State 383

  362 expr_without_variable: '`' backticks_expr '`' .

    $default  reduce using rule 362 (expr_without_variable)


State 384

  410 scalar: '"' encaps_list '"' .

    $default  reduce using rule 410 (scalar)


State 385

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  440 simple_variable: '$' '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    '}'                           shift, and go to state 601


State 386

   82 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 82 (namespace_name)


State 387

  231 argument: "... (T_ELLIPSIS)" . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 602
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 388

  226 argument_list: '(' ')' .

    $default  reduce using rule 226 (argument_list)


State 389

  227 argument_list: '(' non_empty_argument_list . ')'
  229 non_empty_argument_list: non_empty_argument_list . ',' argument

    ','  shift, and go to state 603
    ')'  shift, and go to state 604


State 390

  228 non_empty_argument_list: argument .

    $default  reduce using rule 228 (non_empty_argument_list)


State 391

  230 argument: expr .
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 230 (argument)


State 392

  168 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 . "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 605


State 393

  206 if_stmt_without_else: if_stmt_without_else "elseif (T_ELSEIF)" '(' . expr ')' statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 606
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 394

  208 if_stmt: if_stmt_without_else "else (T_ELSE)" statement .

    $default  reduce using rule 208 (if_stmt)


State 395

  210 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' . expr ')' ':' inner_statement_list

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 607
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 396

  212 alt_if_stmt: alt_if_stmt_without_else "else (T_ELSE)" ':' . inner_statement_list "endif (T_ENDIF)" ';'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 608


State 397

  211 alt_if_stmt: alt_if_stmt_without_else "endif (T_ENDIF)" ';' .

    $default  reduce using rule 211 (alt_if_stmt)


State 398

  162 function_declaration_statement: function returns_ref "identifier (T_STRING)" . '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}'

    '('  shift, and go to state 609


State 399

  368 expr_without_variable: function returns_ref '(' . parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 610
    "callable (T_CALLABLE)"    shift, and go to state 611
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    ')'       reduce using rule 214 (parameter_list)
    $default  reduce using rule 219 (optional_type)

    namespace_name            go to state 83
    name                      go to state 612
    parameter_list            go to state 613
    non_empty_parameter_list  go to state 614
    parameter                 go to state 615
    optional_type             go to state 616
    type                      go to state 617


State 400

    2 reserved_non_modifiers: "include (T_INCLUDE)" .

    $default  reduce using rule 2 (reserved_non_modifiers)


State 401

    3 reserved_non_modifiers: "include_once (T_INCLUDE_ONCE)" .

    $default  reduce using rule 3 (reserved_non_modifiers)


State 402

    4 reserved_non_modifiers: "eval (T_EVAL)" .

    $default  reduce using rule 4 (reserved_non_modifiers)


State 403

    5 reserved_non_modifiers: "require (T_REQUIRE)" .

    $default  reduce using rule 5 (reserved_non_modifiers)


State 404

    6 reserved_non_modifiers: "require_once (T_REQUIRE_ONCE)" .

    $default  reduce using rule 6 (reserved_non_modifiers)


State 405

    7 reserved_non_modifiers: "or (T_LOGICAL_OR)" .

    $default  reduce using rule 7 (reserved_non_modifiers)


State 406

    8 reserved_non_modifiers: "xor (T_LOGICAL_XOR)" .

    $default  reduce using rule 8 (reserved_non_modifiers)


State 407

    9 reserved_non_modifiers: "and (T_LOGICAL_AND)" .

    $default  reduce using rule 9 (reserved_non_modifiers)


State 408

   45 reserved_non_modifiers: "print (T_PRINT)" .

    $default  reduce using rule 45 (reserved_non_modifiers)


State 409

   46 reserved_non_modifiers: "yield (T_YIELD)" .

    $default  reduce using rule 46 (reserved_non_modifiers)


State 410

   10 reserved_non_modifiers: "instanceof (T_INSTANCEOF)" .

    $default  reduce using rule 10 (reserved_non_modifiers)


State 411

   11 reserved_non_modifiers: "new (T_NEW)" .

    $default  reduce using rule 11 (reserved_non_modifiers)


State 412

   12 reserved_non_modifiers: "clone (T_CLONE)" .

    $default  reduce using rule 12 (reserved_non_modifiers)


State 413

   15 reserved_non_modifiers: "elseif (T_ELSEIF)" .

    $default  reduce using rule 15 (reserved_non_modifiers)


State 414

   16 reserved_non_modifiers: "else (T_ELSE)" .

    $default  reduce using rule 16 (reserved_non_modifiers)


State 415

   17 reserved_non_modifiers: "endif (T_ENDIF)" .

    $default  reduce using rule 17 (reserved_non_modifiers)


State 416

   71 semi_reserved: "static (T_STATIC)" .

    $default  reduce using rule 71 (semi_reserved)


State 417

   72 semi_reserved: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 72 (semi_reserved)


State 418

   73 semi_reserved: "final (T_FINAL)" .

    $default  reduce using rule 73 (semi_reserved)


State 419

   74 semi_reserved: "private (T_PRIVATE)" .

    $default  reduce using rule 74 (semi_reserved)


State 420

   75 semi_reserved: "protected (T_PROTECTED)" .

    $default  reduce using rule 75 (semi_reserved)


State 421

   76 semi_reserved: "public (T_PUBLIC)" .

    $default  reduce using rule 76 (semi_reserved)


State 422

   77 identifier: "identifier (T_STRING)" .

    $default  reduce using rule 77 (identifier)


State 423

   13 reserved_non_modifiers: "exit (T_EXIT)" .

    $default  reduce using rule 13 (reserved_non_modifiers)


State 424

   14 reserved_non_modifiers: "if (T_IF)" .

    $default  reduce using rule 14 (reserved_non_modifiers)


State 425

   18 reserved_non_modifiers: "echo (T_ECHO)" .

    $default  reduce using rule 18 (reserved_non_modifiers)


State 426

   19 reserved_non_modifiers: "do (T_DO)" .

    $default  reduce using rule 19 (reserved_non_modifiers)


State 427

   20 reserved_non_modifiers: "while (T_WHILE)" .

    $default  reduce using rule 20 (reserved_non_modifiers)


State 428

   21 reserved_non_modifiers: "endwhile (T_ENDWHILE)" .

    $default  reduce using rule 21 (reserved_non_modifiers)


State 429

   22 reserved_non_modifiers: "for (T_FOR)" .

    $default  reduce using rule 22 (reserved_non_modifiers)


State 430

   23 reserved_non_modifiers: "endfor (T_ENDFOR)" .

    $default  reduce using rule 23 (reserved_non_modifiers)


State 431

   24 reserved_non_modifiers: "foreach (T_FOREACH)" .

    $default  reduce using rule 24 (reserved_non_modifiers)


State 432

   25 reserved_non_modifiers: "endforeach (T_ENDFOREACH)" .

    $default  reduce using rule 25 (reserved_non_modifiers)


State 433

   26 reserved_non_modifiers: "declare (T_DECLARE)" .

    $default  reduce using rule 26 (reserved_non_modifiers)


State 434

   27 reserved_non_modifiers: "enddeclare (T_ENDDECLARE)" .

    $default  reduce using rule 27 (reserved_non_modifiers)


State 435

   28 reserved_non_modifiers: "as (T_AS)" .

    $default  reduce using rule 28 (reserved_non_modifiers)


State 436

   48 reserved_non_modifiers: "switch (T_SWITCH)" .

    $default  reduce using rule 48 (reserved_non_modifiers)


State 437

   49 reserved_non_modifiers: "endswitch (T_ENDSWITCH)" .

    $default  reduce using rule 49 (reserved_non_modifiers)


State 438

   50 reserved_non_modifiers: "case (T_CASE)" .

    $default  reduce using rule 50 (reserved_non_modifiers)


State 439

   51 reserved_non_modifiers: "default (T_DEFAULT)" .

    $default  reduce using rule 51 (reserved_non_modifiers)


State 440

   52 reserved_non_modifiers: "break (T_BREAK)" .

    $default  reduce using rule 52 (reserved_non_modifiers)


State 441

   40 reserved_non_modifiers: "continue (T_CONTINUE)" .

    $default  reduce using rule 40 (reserved_non_modifiers)


State 442

   41 reserved_non_modifiers: "goto (T_GOTO)" .

    $default  reduce using rule 41 (reserved_non_modifiers)


State 443

   42 reserved_non_modifiers: "function (T_FUNCTION)" .

    $default  reduce using rule 42 (reserved_non_modifiers)


State 444

   43 reserved_non_modifiers: "const (T_CONST)" .

    $default  reduce using rule 43 (reserved_non_modifiers)


State 445

   44 reserved_non_modifiers: "return (T_RETURN)" .

    $default  reduce using rule 44 (reserved_non_modifiers)


State 446

   29 reserved_non_modifiers: "try (T_TRY)" .

    $default  reduce using rule 29 (reserved_non_modifiers)


State 447

   30 reserved_non_modifiers: "catch (T_CATCH)" .

    $default  reduce using rule 30 (reserved_non_modifiers)


State 448

   31 reserved_non_modifiers: "finally (T_FINALLY)" .

    $default  reduce using rule 31 (reserved_non_modifiers)


State 449

   32 reserved_non_modifiers: "throw (T_THROW)" .

    $default  reduce using rule 32 (reserved_non_modifiers)


State 450

   33 reserved_non_modifiers: "use (T_USE)" .

    $default  reduce using rule 33 (reserved_non_modifiers)


State 451

   34 reserved_non_modifiers: "insteadof (T_INSTEADOF)" .

    $default  reduce using rule 34 (reserved_non_modifiers)


State 452

   35 reserved_non_modifiers: "global (T_GLOBAL)" .

    $default  reduce using rule 35 (reserved_non_modifiers)


State 453

   36 reserved_non_modifiers: "var (T_VAR)" .

    $default  reduce using rule 36 (reserved_non_modifiers)


State 454

   37 reserved_non_modifiers: "unset (T_UNSET)" .

    $default  reduce using rule 37 (reserved_non_modifiers)


State 455

   38 reserved_non_modifiers: "isset (T_ISSET)" .

    $default  reduce using rule 38 (reserved_non_modifiers)


State 456

   39 reserved_non_modifiers: "empty (T_EMPTY)" .

    $default  reduce using rule 39 (reserved_non_modifiers)


State 457

   69 reserved_non_modifiers: "__halt_compiler (T_HALT_COMPILER)" .

    $default  reduce using rule 69 (reserved_non_modifiers)


State 458

   60 reserved_non_modifiers: "class (T_CLASS)" .

    $default  reduce using rule 60 (reserved_non_modifiers)


State 459

   58 reserved_non_modifiers: "trait (T_TRAIT)" .

    $default  reduce using rule 58 (reserved_non_modifiers)


State 460

   59 reserved_non_modifiers: "interface (T_INTERFACE)" .

    $default  reduce using rule 59 (reserved_non_modifiers)


State 461

   55 reserved_non_modifiers: "extends (T_EXTENDS)" .

    $default  reduce using rule 55 (reserved_non_modifiers)


State 462

   56 reserved_non_modifiers: "implements (T_IMPLEMENTS)" .

    $default  reduce using rule 56 (reserved_non_modifiers)


State 463

   47 reserved_non_modifiers: "list (T_LIST)" .

    $default  reduce using rule 47 (reserved_non_modifiers)


State 464

   53 reserved_non_modifiers: "array (T_ARRAY)" .

    $default  reduce using rule 53 (reserved_non_modifiers)


State 465

   54 reserved_non_modifiers: "callable (T_CALLABLE)" .

    $default  reduce using rule 54 (reserved_non_modifiers)


State 466

   65 reserved_non_modifiers: "__LINE__ (T_LINE)" .

    $default  reduce using rule 65 (reserved_non_modifiers)


State 467

   66 reserved_non_modifiers: "__FILE__ (T_FILE)" .

    $default  reduce using rule 66 (reserved_non_modifiers)


State 468

   67 reserved_non_modifiers: "__DIR__ (T_DIR)" .

    $default  reduce using rule 67 (reserved_non_modifiers)


State 469

   61 reserved_non_modifiers: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 61 (reserved_non_modifiers)


State 470

   62 reserved_non_modifiers: "__TRAIT__ (T_TRAIT_C)" .

    $default  reduce using rule 62 (reserved_non_modifiers)


State 471

   64 reserved_non_modifiers: "__METHOD__ (T_METHOD_C)" .

    $default  reduce using rule 64 (reserved_non_modifiers)


State 472

   63 reserved_non_modifiers: "__FUNCTION__ (T_FUNC_C)" .

    $default  reduce using rule 63 (reserved_non_modifiers)


State 473

   57 reserved_non_modifiers: "namespace (T_NAMESPACE)" .

    $default  reduce using rule 57 (reserved_non_modifiers)


State 474

   68 reserved_non_modifiers: "__NAMESPACE__ (T_NS_C)" .

    $default  reduce using rule 68 (reserved_non_modifiers)


State 475

  451 member_name: '{' . expr '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 618
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 476

   70 semi_reserved: reserved_non_modifiers .

    $default  reduce using rule 70 (semi_reserved)


State 477

   78 identifier: semi_reserved .

    $default  reduce using rule 78 (identifier)


State 478

  415 constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier .
  450 member_name: identifier .

    '('       reduce using rule 450 (member_name)
    $default  reduce using rule 415 (constant)


State 479

  442 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable .
  452 member_name: simple_variable .

    '('       reduce using rule 452 (member_name)
    $default  reduce using rule 442 (static_member)


State 480

  381 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name . argument_list

    '('  shift, and go to state 226

    argument_list  go to state 619


State 481

  432 callable_variable: constant '[' optional_expr . ']'

    ']'  shift, and go to state 620


State 482

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  317                      | expr "or (T_LOGICAL_OR)" expr .
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 317 (expr_without_variable)


State 483

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  319                      | expr "xor (T_LOGICAL_XOR)" expr .
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 319 (expr_without_variable)


State 484

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  318                      | expr "and (T_LOGICAL_AND)" expr .
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 318 (expr_without_variable)


State 485

  349 expr_without_variable: expr '?' ':' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 621
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 486

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  348                      | expr '?' expr . ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    ':'                           shift, and go to state 622
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267


State 487

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  350                      | expr "?? (T_COALESCE)" expr .

    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 350 (expr_without_variable)


State 488

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  315                      | expr "|| (T_BOOLEAN_OR)" expr .
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 315 (expr_without_variable)


State 489

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  316                      | expr "&& (T_BOOLEAN_AND)" expr .
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 316 (expr_without_variable)


State 490

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  320                      | expr '|' expr .
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 320 (expr_without_variable)


State 491

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  322                      | expr '^' expr .
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 322 (expr_without_variable)


State 492

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  321                      | expr '&' expr .
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 321 (expr_without_variable)


State 493

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  338                      | expr "== (T_IS_EQUAL)" expr .
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    "== (T_IS_EQUAL)"           error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "<=> (T_SPACESHIP)"         error (nonassociative)

    $default  reduce using rule 338 (expr_without_variable)


State 494

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  339                      | expr "!= (T_IS_NOT_EQUAL)" expr .
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    "== (T_IS_EQUAL)"           error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "<=> (T_SPACESHIP)"         error (nonassociative)

    $default  reduce using rule 339 (expr_without_variable)


State 495

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  336                      | expr "=== (T_IS_IDENTICAL)" expr .
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    "== (T_IS_EQUAL)"           error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "<=> (T_SPACESHIP)"         error (nonassociative)

    $default  reduce using rule 336 (expr_without_variable)


State 496

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  337                      | expr "!== (T_IS_NOT_IDENTICAL)" expr .
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    "== (T_IS_EQUAL)"           error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "<=> (T_SPACESHIP)"         error (nonassociative)

    $default  reduce using rule 337 (expr_without_variable)


State 497

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  344                      | expr "<=> (T_SPACESHIP)" expr .
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    "== (T_IS_EQUAL)"           error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "<=> (T_SPACESHIP)"         error (nonassociative)

    $default  reduce using rule 344 (expr_without_variable)


State 498

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  340                      | expr '<' expr .
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "<< (T_SL)"                  shift, and go to state 258
    ">> (T_SR)"                  shift, and go to state 259
    '+'                          shift, and go to state 260
    '-'                          shift, and go to state 261
    '.'                          shift, and go to state 262
    '*'                          shift, and go to state 263
    '/'                          shift, and go to state 264
    '%'                          shift, and go to state 265
    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    '<'                           error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 340 (expr_without_variable)


State 499

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  341                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr .
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "<< (T_SL)"                  shift, and go to state 258
    ">> (T_SR)"                  shift, and go to state 259
    '+'                          shift, and go to state 260
    '-'                          shift, and go to state 261
    '.'                          shift, and go to state 262
    '*'                          shift, and go to state 263
    '/'                          shift, and go to state 264
    '%'                          shift, and go to state 265
    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    '<'                           error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 341 (expr_without_variable)


State 500

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  342                      | expr '>' expr .
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "<< (T_SL)"                  shift, and go to state 258
    ">> (T_SR)"                  shift, and go to state 259
    '+'                          shift, and go to state 260
    '-'                          shift, and go to state 261
    '.'                          shift, and go to state 262
    '*'                          shift, and go to state 263
    '/'                          shift, and go to state 264
    '%'                          shift, and go to state 265
    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    '<'                           error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 342 (expr_without_variable)


State 501

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  343                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr .
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "<< (T_SL)"                  shift, and go to state 258
    ">> (T_SR)"                  shift, and go to state 259
    '+'                          shift, and go to state 260
    '-'                          shift, and go to state 261
    '.'                          shift, and go to state 262
    '*'                          shift, and go to state 263
    '/'                          shift, and go to state 264
    '%'                          shift, and go to state 265
    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    '<'                           error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 343 (expr_without_variable)


State 502

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  330                      | expr "<< (T_SL)" expr .
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '+'                          shift, and go to state 260
    '-'                          shift, and go to state 261
    '.'                          shift, and go to state 262
    '*'                          shift, and go to state 263
    '/'                          shift, and go to state 264
    '%'                          shift, and go to state 265
    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    $default  reduce using rule 330 (expr_without_variable)


State 503

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  331                      | expr ">> (T_SR)" expr .
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '+'                          shift, and go to state 260
    '-'                          shift, and go to state 261
    '.'                          shift, and go to state 262
    '*'                          shift, and go to state 263
    '/'                          shift, and go to state 264
    '%'                          shift, and go to state 265
    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    $default  reduce using rule 331 (expr_without_variable)


State 504

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  324                      | expr '+' expr .
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '*'                          shift, and go to state 263
    '/'                          shift, and go to state 264
    '%'                          shift, and go to state 265
    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    $default  reduce using rule 324 (expr_without_variable)


State 505

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  325                      | expr '-' expr .
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '*'                          shift, and go to state 263
    '/'                          shift, and go to state 264
    '%'                          shift, and go to state 265
    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    $default  reduce using rule 325 (expr_without_variable)


State 506

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  323                      | expr '.' expr .
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '*'                          shift, and go to state 263
    '/'                          shift, and go to state 264
    '%'                          shift, and go to state 265
    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    $default  reduce using rule 323 (expr_without_variable)


State 507

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  326                      | expr '*' expr .
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    $default  reduce using rule 326 (expr_without_variable)


State 508

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  328                      | expr '/' expr .
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    $default  reduce using rule 328 (expr_without_variable)


State 509

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  329                      | expr '%' expr .
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 266
    "** (T_POW)"                 shift, and go to state 267

    $default  reduce using rule 329 (expr_without_variable)


State 510

  345 expr_without_variable: expr "instanceof (T_INSTANCEOF)" class_name_reference .

    $default  reduce using rule 345 (expr_without_variable)


State 511

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  327                      | expr "** (T_POW)" expr .
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "** (T_POW)"  shift, and go to state 267

    $default  reduce using rule 327 (expr_without_variable)


State 512

  416 constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier .
  450 member_name: identifier .

    '('       reduce using rule 450 (member_name)
    $default  reduce using rule 416 (constant)


State 513

  443 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable .
  452 member_name: simple_variable .

    '('       reduce using rule 452 (member_name)
    $default  reduce using rule 443 (static_member)


State 514

  382 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name . argument_list

    '('  shift, and go to state 226

    argument_list  go to state 623


State 515

  431 callable_variable: dereferencable '[' optional_expr . ']'

    ']'  shift, and go to state 624


State 516

  453 property_name: "identifier (T_STRING)" .

    $default  reduce using rule 453 (property_name)


State 517

  454 property_name: '{' . expr '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 625
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 518

  455 property_name: simple_variable .

    $default  reduce using rule 455 (property_name)


State 519

  434 callable_variable: dereferencable "-> (T_OBJECT_OPERATOR)" property_name . argument_list
  438 variable: dereferencable "-> (T_OBJECT_OPERATOR)" property_name .

    '('  shift, and go to state 226

    $default  reduce using rule 438 (variable)

    argument_list  go to state 626


State 520

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  433 callable_variable: dereferencable '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    '}'                           shift, and go to state 627


State 521

  297 expr_without_variable: variable '=' '&' . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 628
    simple_variable        go to state 111
    static_member          go to state 112


State 522

  296 expr_without_variable: variable '=' expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 296 (expr_without_variable)


State 523

  299 expr_without_variable: variable "+= (T_PLUS_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 299 (expr_without_variable)


State 524

  300 expr_without_variable: variable "-= (T_MINUS_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 300 (expr_without_variable)


State 525

  301 expr_without_variable: variable "*= (T_MUL_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 301 (expr_without_variable)


State 526

  303 expr_without_variable: variable "/= (T_DIV_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 303 (expr_without_variable)


State 527

  304 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 304 (expr_without_variable)


State 528

  305 expr_without_variable: variable "%= (T_MOD_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 305 (expr_without_variable)


State 529

  306 expr_without_variable: variable "&= (T_AND_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 306 (expr_without_variable)


State 530

  307 expr_without_variable: variable "|= (T_OR_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 307 (expr_without_variable)


State 531

  308 expr_without_variable: variable "^= (T_XOR_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 308 (expr_without_variable)


State 532

  309 expr_without_variable: variable "<<= (T_SL_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 309 (expr_without_variable)


State 533

  310 expr_without_variable: variable ">>= (T_SR_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 310 (expr_without_variable)


State 534

  302 expr_without_variable: variable "**= (T_POW_EQUAL)" expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 302 (expr_without_variable)


State 535

  487 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr ')' .

    $default  reduce using rule 487 (internal_functions_in_yacc)


State 536

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  366                      | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" expr .

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 366 (expr_without_variable)


State 537

  425 dereferencable: '(' expr ')' .
  428 callable_expr: '(' expr ')' .

    '('       reduce using rule 428 (callable_expr)
    $default  reduce using rule 425 (dereferencable)


State 538

  467 array_pair: expr "=> (T_DOUBLE_ARROW)" '&' . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 629
    simple_variable        go to state 111
    static_member          go to state 112


State 539

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  465 array_pair: expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 465 (array_pair)


State 540

  463 non_empty_array_pair_list: non_empty_array_pair_list ',' array_pair .

    $default  reduce using rule 463 (non_empty_array_pair_list)


State 541

  292 anonymous_class: "class (T_CLASS)" @8 ctor_arguments . extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 580

    $default  reduce using rule 179 (extends_from)

    extends_from  go to state 630


State 542

  448 new_variable: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable .

    $default  reduce using rule 448 (new_variable)


State 543

  445 new_variable: new_variable '[' optional_expr . ']'

    ']'  shift, and go to state 631


State 544

  447 new_variable: new_variable "-> (T_OBJECT_OPERATOR)" property_name .

    $default  reduce using rule 447 (new_variable)


State 545

  449 new_variable: new_variable ":: (T_PAAMAYIM_NEKUDOTAYIM)" simple_variable .

    $default  reduce using rule 449 (new_variable)


State 546

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  446 new_variable: new_variable '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    '}'                           shift, and go to state 632


State 547

  238 static_var: "variable (T_VARIABLE)" '=' expr .
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 238 (static_var)


State 548

  235 static_var_list: static_var_list ',' static_var .

    $default  reduce using rule 235 (static_var_list)


State 549

  369 expr_without_variable: "static (T_STATIC)" function returns_ref '(' . parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 610
    "callable (T_CALLABLE)"    shift, and go to state 611
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    ')'       reduce using rule 214 (parameter_list)
    $default  reduce using rule 219 (optional_type)

    namespace_name            go to state 83
    name                      go to state 612
    parameter_list            go to state 633
    non_empty_parameter_list  go to state 614
    parameter                 go to state 615
    optional_type             go to state 616
    type                      go to state 617


State 550

  389 exit_expr: '(' optional_expr ')' .

    $default  reduce using rule 389 (exit_expr)


State 551

  205 if_stmt_without_else: "if (T_IF)" '(' expr ')' . statement
  209 alt_if_stmt_without_else: "if (T_IF)" '(' expr ')' . ':' inner_statement_list

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 634
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 635
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 552

  284 echo_expr_list: echo_expr_list ',' echo_expr .

    $default  reduce using rule 284 (echo_expr_list)


State 553

  134 statement: "do (T_DO)" statement "while (T_WHILE)" '(' . expr ')' ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 636
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 554

  133 statement: "while (T_WHILE)" '(' expr ')' . while_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 637
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 638
    while_statement             go to state 639
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 555

  135 statement: "for (T_FOR)" '(' for_exprs ';' . for_exprs ';' for_exprs ')' for_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 287 (for_exprs)

    namespace_name              go to state 83
    name                        go to state 84
    for_exprs                   go to state 640
    non_empty_for_exprs         go to state 317
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 318
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 556

  289 non_empty_for_exprs: non_empty_for_exprs ',' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 641
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 557

  146 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" . foreach_variable ')' foreach_statement
  147          | "foreach (T_FOREACH)" '(' expr "as (T_AS)" . foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement

    '&'                                           shift, and go to state 642
    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 643
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    foreach_variable       go to state 644
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 645
    simple_variable        go to state 111
    static_member          go to state 112


State 558

  149 statement: "declare (T_DECLARE)" '(' const_list ')' . $@3 declare_statement

    $default  reduce using rule 148 ($@3)

    $@3  go to state 646


State 559

  136 statement: "switch (T_SWITCH)" '(' expr ')' . switch_case_list

    ':'  shift, and go to state 647
    '{'  shift, and go to state 648

    switch_case_list  go to state 649


State 560

  283 const_decl: "identifier (T_STRING)" '=' expr . backup_doc_comment
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 650


State 561

  120 const_list: const_list ',' const_decl .

    $default  reduce using rule 120 (const_list)


State 562

  151 statement: "try (T_TRY)" '{' inner_statement_list '}' . catch_list finally_statement

    $default  reduce using rule 155 (catch_list)

    catch_list  go to state 651


State 563

   82 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"
  107 mixed_group_use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "\\ (T_NS_SEPARATOR)" . '{' inline_use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 386
    '{'                      shift, and go to state 652


State 564

  117 unprefixed_use_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 117 (unprefixed_use_declaration)


State 565

  106 mixed_group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' . inline_use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 115
    "function (T_FUNCTION)"  shift, and go to state 184
    "const (T_CONST)"        shift, and go to state 185

    namespace_name              go to state 571
    use_type                    go to state 653
    inline_use_declarations     go to state 654
    inline_use_declaration      go to state 655
    unprefixed_use_declaration  go to state 656


State 566

   82 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  105 group_use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name . "\\ (T_NS_SEPARATOR)" '{' unprefixed_use_declarations '}'
  116 unprefixed_use_declaration: namespace_name .
  117                           | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 333
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 657

    $default  reduce using rule 116 (unprefixed_use_declaration)


State 567

   82 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"
  104 group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" . '{' unprefixed_use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 386
    '{'                      shift, and go to state 658


State 568

   98 top_statement: "use (T_USE)" use_type group_use_declaration ';' .

    $default  reduce using rule 98 (top_statement)


State 569

  100 top_statement: "use (T_USE)" use_type use_declarations ';' .

    $default  reduce using rule 100 (top_statement)


State 570

  119 use_declaration: "\\ (T_NS_SEPARATOR)" . unprefixed_use_declaration

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name              go to state 571
    unprefixed_use_declaration  go to state 332


State 571

   82 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  116 unprefixed_use_declaration: namespace_name .
  117                           | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 333
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 225

    $default  reduce using rule 116 (unprefixed_use_declaration)


State 572

  112 use_declarations: use_declarations ',' use_declaration .

    $default  reduce using rule 112 (use_declarations)


State 573

  232 global_var_list: global_var_list ',' global_var .

    $default  reduce using rule 232 (global_var_list)


State 574

  160 unset_variables: unset_variables ',' . unset_variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    unset_variable         go to state 659
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 346
    simple_variable        go to state 111
    static_member          go to state 112


State 575

  145 statement: "unset (T_UNSET)" '(' unset_variables ')' . ';'

    ';'  shift, and go to state 660


State 576

  491 isset_variables: isset_variables ',' . isset_variable

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 347
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113
    isset_variable              go to state 661


State 577

  483 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')' .

    $default  reduce using rule 483 (internal_functions_in_yacc)


State 578

  484 internal_functions_in_yacc: "empty (T_EMPTY)" '(' expr ')' .

    $default  reduce using rule 484 (internal_functions_in_yacc)


State 579

   91 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 91 (top_statement)


State 580

  180 extends_from: "extends (T_EXTENDS)" . name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 662


State 581

  170 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from . implements_list backup_doc_comment '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 663

    $default  reduce using rule 183 (implements_list)

    implements_list  go to state 664


State 582

  176 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" backup_doc_comment . '{' class_statement_list '}'

    '{'  shift, and go to state 665


State 583

  182 interface_extends_list: "extends (T_EXTENDS)" . name_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 666
    name_list       go to state 667


State 584

  178 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list . backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 668


State 585

  459 assignment_list_element: "list (T_LIST)" '(' . assignment_list ')'

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 355
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    $default  reduce using rule 460 (assignment_list_element)

    namespace_name           go to state 83
    name                     go to state 84
    function_call            go to state 100
    class_name               go to state 101
    dereferencable_scalar    go to state 132
    constant                 go to state 133
    variable_class_name      go to state 106
    dereferencable           go to state 107
    callable_expr            go to state 108
    callable_variable        go to state 109
    variable                 go to state 356
    simple_variable          go to state 111
    static_member            go to state 112
    assignment_list          go to state 669
    assignment_list_element  go to state 358


State 586

  456 assignment_list: assignment_list ',' . assignment_list_element

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 355
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    $default  reduce using rule 460 (assignment_list_element)

    namespace_name           go to state 83
    name                     go to state 84
    function_call            go to state 100
    class_name               go to state 101
    dereferencable_scalar    go to state 132
    constant                 go to state 133
    variable_class_name      go to state 106
    dereferencable           go to state 107
    callable_expr            go to state 108
    callable_variable        go to state 109
    variable                 go to state 356
    simple_variable          go to state 111
    static_member            go to state 112
    assignment_list_element  go to state 670


State 587

  295 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' . '=' expr

    '='  shift, and go to state 671


State 588

  395 dereferencable_scalar: "array (T_ARRAY)" '(' array_pair_list ')' .

    $default  reduce using rule 395 (dereferencable_scalar)


State 589

  480 encaps_var_offset: "identifier (T_STRING)" .

    $default  reduce using rule 480 (encaps_var_offset)


State 590

  482 encaps_var_offset: "variable (T_VARIABLE)" .

    $default  reduce using rule 482 (encaps_var_offset)


State 591

  481 encaps_var_offset: "number (T_NUM_STRING)" .

    $default  reduce using rule 481 (encaps_var_offset)


State 592

  474 encaps_var: "variable (T_VARIABLE)" '[' encaps_var_offset . ']'

    ']'  shift, and go to state 672


State 593

  475 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 475 (encaps_var)


State 594

  478 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' . expr ']' '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 673
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 595

  477 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '}' .

    $default  reduce using rule 477 (encaps_var)


State 596

  476 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}' .

    $default  reduce using rule 476 (encaps_var)


State 597

  479 encaps_var: "{$ (T_CURLY_OPEN)" variable '}' .

    $default  reduce using rule 479 (encaps_var)


State 598

   94 top_statement: "namespace (T_NAMESPACE)" namespace_name $@1 '{' . top_statement_list '}'

    $default  reduce using rule 80 (top_statement_list)

    top_statement_list  go to state 674


State 599

   79 top_statement_list: top_statement_list . top_statement
   96 top_statement: "namespace (T_NAMESPACE)" $@2 '{' top_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "const (T_CONST)"                             shift, and go to state 51
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "use (T_USE)"                                 shift, and go to state 55
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 60
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 74
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 675
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    top_statement                    go to state 85
    statement                        go to state 86
    function_declaration_statement   go to state 87
    class_declaration_statement      go to state 88
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 91
    interface_declaration_statement  go to state 92
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 600

  129 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 676


State 601

  440 simple_variable: '$' '{' expr '}' .

    $default  reduce using rule 440 (simple_variable)


State 602

  231 argument: "... (T_ELLIPSIS)" expr .
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 231 (argument)


State 603

  229 non_empty_argument_list: non_empty_argument_list ',' . argument

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    "... (T_ELLIPSIS)"                            shift, and go to state 387
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    argument                    go to state 677
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 391
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 604

  227 argument_list: '(' non_empty_argument_list ')' .

    $default  reduce using rule 227 (argument_list)


State 605

  168 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" . extends_from implements_list backup_doc_comment '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 580

    $default  reduce using rule 179 (extends_from)

    extends_from  go to state 678


State 606

  206 if_stmt_without_else: if_stmt_without_else "elseif (T_ELSEIF)" '(' expr . ')' statement
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ')'                           shift, and go to state 679


State 607

  210 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' expr . ')' ':' inner_statement_list
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ')'                           shift, and go to state 680


State 608

  122 inner_statement_list: inner_statement_list . inner_statement
  212 alt_if_stmt: alt_if_stmt_without_else "else (T_ELSE)" ':' inner_statement_list . "endif (T_ENDIF)" ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "endif (T_ENDIF)"                             shift, and go to state 681
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 609

  162 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' . parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 610
    "callable (T_CALLABLE)"    shift, and go to state 611
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    ')'       reduce using rule 214 (parameter_list)
    $default  reduce using rule 219 (optional_type)

    namespace_name            go to state 83
    name                      go to state 612
    parameter_list            go to state 682
    non_empty_parameter_list  go to state 614
    parameter                 go to state 615
    optional_type             go to state 616
    type                      go to state 617


State 610

  221 type: "array (T_ARRAY)" .

    $default  reduce using rule 221 (type)


State 611

  222 type: "callable (T_CALLABLE)" .

    $default  reduce using rule 222 (type)


State 612

  223 type: name .

    $default  reduce using rule 223 (type)


State 613

  368 expr_without_variable: function returns_ref '(' parameter_list . ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    ')'  shift, and go to state 683


State 614

  213 parameter_list: non_empty_parameter_list .
  216 non_empty_parameter_list: non_empty_parameter_list . ',' parameter

    ','  shift, and go to state 684

    $default  reduce using rule 213 (parameter_list)


State 615

  215 non_empty_parameter_list: parameter .

    $default  reduce using rule 215 (non_empty_parameter_list)


State 616

  217 parameter: optional_type . is_reference is_variadic "variable (T_VARIABLE)"
  218          | optional_type . is_reference is_variadic "variable (T_VARIABLE)" '=' expr

    '&'  shift, and go to state 685

    $default  reduce using rule 163 (is_reference)

    is_reference  go to state 686


State 617

  220 optional_type: type .

    $default  reduce using rule 220 (optional_type)


State 618

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  451 member_name: '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    '}'                           shift, and go to state 687


State 619

  381 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list .

    $default  reduce using rule 381 (function_call)


State 620

  432 callable_variable: constant '[' optional_expr ']' .

    $default  reduce using rule 432 (callable_variable)


State 621

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  349                      | expr '?' ':' expr .
  350                      | expr . "?? (T_COALESCE)" expr

    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 349 (expr_without_variable)


State 622

  348 expr_without_variable: expr '?' expr ':' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 688
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 623

  382 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" member_name argument_list .

    $default  reduce using rule 382 (function_call)


State 624

  431 callable_variable: dereferencable '[' optional_expr ']' .

    $default  reduce using rule 431 (callable_variable)


State 625

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  454 property_name: '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    '}'                           shift, and go to state 689


State 626

  434 callable_variable: dereferencable "-> (T_OBJECT_OPERATOR)" property_name argument_list .

    $default  reduce using rule 434 (callable_variable)


State 627

  433 callable_variable: dereferencable '{' expr '}' .

    $default  reduce using rule 433 (callable_variable)


State 628

  297 expr_without_variable: variable '=' '&' variable .
  424 dereferencable: variable .

    '['                            reduce using rule 424 (dereferencable)
    "-> (T_OBJECT_OPERATOR)"       reduce using rule 424 (dereferencable)
    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 424 (dereferencable)
    '{'                            reduce using rule 424 (dereferencable)
    $default                       reduce using rule 297 (expr_without_variable)


State 629

  424 dereferencable: variable .
  467 array_pair: expr "=> (T_DOUBLE_ARROW)" '&' variable .

    ','       reduce using rule 467 (array_pair)
    ')'       reduce using rule 467 (array_pair)
    ']'       reduce using rule 467 (array_pair)
    $default  reduce using rule 424 (dereferencable)


State 630

  292 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from . implements_list backup_doc_comment '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 663

    $default  reduce using rule 183 (implements_list)

    implements_list  go to state 690


State 631

  445 new_variable: new_variable '[' optional_expr ']' .

    $default  reduce using rule 445 (new_variable)


State 632

  446 new_variable: new_variable '{' expr '}' .

    $default  reduce using rule 446 (new_variable)


State 633

  369 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list . ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    ')'  shift, and go to state 691


State 634

  209 alt_if_stmt_without_else: "if (T_IF)" '(' expr ')' ':' . inner_statement_list

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 692


State 635

  205 if_stmt_without_else: "if (T_IF)" '(' expr ')' statement .

    $default  reduce using rule 205 (if_stmt_without_else)


State 636

  134 statement: "do (T_DO)" statement "while (T_WHILE)" '(' expr . ')' ';'
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ')'                           shift, and go to state 693


State 637

  204 while_statement: ':' . inner_statement_list "endwhile (T_ENDWHILE)" ';'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 694


State 638

  203 while_statement: statement .

    $default  reduce using rule 203 (while_statement)


State 639

  133 statement: "while (T_WHILE)" '(' expr ')' while_statement .

    $default  reduce using rule 133 (statement)


State 640

  135 statement: "for (T_FOR)" '(' for_exprs ';' for_exprs . ';' for_exprs ')' for_statement

    ';'  shift, and go to state 695


State 641

  289 non_empty_for_exprs: non_empty_for_exprs ',' expr .
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 289 (non_empty_for_exprs)


State 642

  186 foreach_variable: '&' . variable

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 696
    simple_variable        go to state 111
    static_member          go to state 112


State 643

  187 foreach_variable: "list (T_LIST)" . '(' assignment_list ')'

    '('  shift, and go to state 697


State 644

  146 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable . ')' foreach_statement
  147          | "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable . "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 698
    ')'                    shift, and go to state 699


State 645

  185 foreach_variable: variable .
  424 dereferencable: variable .

    "=> (T_DOUBLE_ARROW)"  reduce using rule 185 (foreach_variable)
    ')'                    reduce using rule 185 (foreach_variable)
    $default               reduce using rule 424 (dereferencable)


State 646

  149 statement: "declare (T_DECLARE)" '(' const_list ')' $@3 . declare_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 700
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 701
    declare_statement           go to state 702
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 647

  196 switch_case_list: ':' . case_list "endswitch (T_ENDSWITCH)" ';'
  197                 | ':' . ';' case_list "endswitch (T_ENDSWITCH)" ';'

    ';'  shift, and go to state 703

    $default  reduce using rule 198 (case_list)

    case_list  go to state 704


State 648

  194 switch_case_list: '{' . case_list '}'
  195                 | '{' . ';' case_list '}'

    ';'  shift, and go to state 705

    $default  reduce using rule 198 (case_list)

    case_list  go to state 706


State 649

  136 statement: "switch (T_SWITCH)" '(' expr ')' switch_case_list .

    $default  reduce using rule 136 (statement)


State 650

  283 const_decl: "identifier (T_STRING)" '=' expr backup_doc_comment .

    $default  reduce using rule 283 (const_decl)


State 651

  151 statement: "try (T_TRY)" '{' inner_statement_list '}' catch_list . finally_statement
  156 catch_list: catch_list . "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

    "catch (T_CATCH)"      shift, and go to state 707
    "finally (T_FINALLY)"  shift, and go to state 708

    $default  reduce using rule 157 (finally_statement)

    finally_statement  go to state 709


State 652

  107 mixed_group_use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "\\ (T_NS_SEPARATOR)" '{' . inline_use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 115
    "function (T_FUNCTION)"  shift, and go to state 184
    "const (T_CONST)"        shift, and go to state 185

    namespace_name              go to state 571
    use_type                    go to state 653
    inline_use_declarations     go to state 710
    inline_use_declaration      go to state 655
    unprefixed_use_declaration  go to state 656


State 653

  115 inline_use_declaration: use_type . unprefixed_use_declaration

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name              go to state 571
    unprefixed_use_declaration  go to state 711


State 654

  106 mixed_group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations . '}'
  108 inline_use_declarations: inline_use_declarations . ',' inline_use_declaration

    ','  shift, and go to state 712
    '}'  shift, and go to state 713


State 655

  109 inline_use_declarations: inline_use_declaration .

    $default  reduce using rule 109 (inline_use_declarations)


State 656

  114 inline_use_declaration: unprefixed_use_declaration .

    $default  reduce using rule 114 (inline_use_declaration)


State 657

   82 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"
  105 group_use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "\\ (T_NS_SEPARATOR)" . '{' unprefixed_use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 386
    '{'                      shift, and go to state 714


State 658

  104 group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' . unprefixed_use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name               go to state 571
    unprefixed_use_declarations  go to state 715
    unprefixed_use_declaration   go to state 716


State 659

  160 unset_variables: unset_variables ',' unset_variable .

    $default  reduce using rule 160 (unset_variables)


State 660

  145 statement: "unset (T_UNSET)" '(' unset_variables ')' ';' .

    $default  reduce using rule 145 (statement)


State 661

  491 isset_variables: isset_variables ',' isset_variable .

    $default  reduce using rule 491 (isset_variables)


State 662

  180 extends_from: "extends (T_EXTENDS)" name .

    $default  reduce using rule 180 (extends_from)


State 663

  184 implements_list: "implements (T_IMPLEMENTS)" . name_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 666
    name_list       go to state 717


State 664

  170 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list . backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 718


State 665

  176 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" backup_doc_comment '{' . class_statement_list '}'

    $default  reduce using rule 240 (class_statement_list)

    class_statement_list  go to state 719


State 666

  245 name_list: name .

    $default  reduce using rule 245 (name_list)


State 667

  182 interface_extends_list: "extends (T_EXTENDS)" name_list .
  246 name_list: name_list . ',' name

    ','  shift, and go to state 720

    $default  reduce using rule 182 (interface_extends_list)


State 668

  178 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment . '{' class_statement_list '}'

    '{'  shift, and go to state 721


State 669

  456 assignment_list: assignment_list . ',' assignment_list_element
  459 assignment_list_element: "list (T_LIST)" '(' assignment_list . ')'

    ','  shift, and go to state 586
    ')'  shift, and go to state 722


State 670

  456 assignment_list: assignment_list ',' assignment_list_element .

    $default  reduce using rule 456 (assignment_list)


State 671

  295 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' '=' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 723
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 672

  474 encaps_var: "variable (T_VARIABLE)" '[' encaps_var_offset ']' .

    $default  reduce using rule 474 (encaps_var)


State 673

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr
  478 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr . ']' '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ']'                           shift, and go to state 724


State 674

   79 top_statement_list: top_statement_list . top_statement
   94 top_statement: "namespace (T_NAMESPACE)" namespace_name $@1 '{' top_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "const (T_CONST)"                             shift, and go to state 51
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "use (T_USE)"                                 shift, and go to state 55
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 60
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 74
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 725
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    top_statement                    go to state 85
    statement                        go to state 86
    function_declaration_statement   go to state 87
    class_declaration_statement      go to state 88
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 91
    interface_declaration_statement  go to state 92
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 675

   96 top_statement: "namespace (T_NAMESPACE)" $@2 '{' top_statement_list '}' .

    $default  reduce using rule 96 (top_statement)


State 676

  129 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 726


State 677

  229 non_empty_argument_list: non_empty_argument_list ',' argument .

    $default  reduce using rule 229 (non_empty_argument_list)


State 678

  168 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from . implements_list backup_doc_comment '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 663

    $default  reduce using rule 183 (implements_list)

    implements_list  go to state 727


State 679

  206 if_stmt_without_else: if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' . statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 728
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 680

  210 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' . ':' inner_statement_list

    ':'  shift, and go to state 729


State 681

  212 alt_if_stmt: alt_if_stmt_without_else "else (T_ELSE)" ':' inner_statement_list "endif (T_ENDIF)" . ';'

    ';'  shift, and go to state 730


State 682

  162 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list . ')' return_type backup_doc_comment '{' inner_statement_list '}'

    ')'  shift, and go to state 731


State 683

  368 expr_without_variable: function returns_ref '(' parameter_list ')' . lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 732

    $default  reduce using rule 374 (lexical_vars)

    lexical_vars  go to state 733


State 684

  216 non_empty_parameter_list: non_empty_parameter_list ',' . parameter

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 610
    "callable (T_CALLABLE)"    shift, and go to state 611
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    $default  reduce using rule 219 (optional_type)

    namespace_name  go to state 83
    name            go to state 612
    parameter       go to state 734
    optional_type   go to state 616
    type            go to state 617


State 685

  164 is_reference: '&' .

    $default  reduce using rule 164 (is_reference)


State 686

  217 parameter: optional_type is_reference . is_variadic "variable (T_VARIABLE)"
  218          | optional_type is_reference . is_variadic "variable (T_VARIABLE)" '=' expr

    "... (T_ELLIPSIS)"  shift, and go to state 735

    $default  reduce using rule 165 (is_variadic)

    is_variadic  go to state 736


State 687

  451 member_name: '{' expr '}' .

    $default  reduce using rule 451 (member_name)


State 688

  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  348                      | expr '?' expr ':' expr .
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 348 (expr_without_variable)


State 689

  454 property_name: '{' expr '}' .

    $default  reduce using rule 454 (property_name)


State 690

  292 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list . backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 737


State 691

  369 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' . lexical_vars return_type backup_doc_comment '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 732

    $default  reduce using rule 374 (lexical_vars)

    lexical_vars  go to state 738


State 692

  122 inner_statement_list: inner_statement_list . inner_statement
  209 alt_if_stmt_without_else: "if (T_IF)" '(' expr ')' ':' inner_statement_list .

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 209 (alt_if_stmt_without_else)

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 693

  134 statement: "do (T_DO)" statement "while (T_WHILE)" '(' expr ')' . ';'

    ';'  shift, and go to state 739


State 694

  122 inner_statement_list: inner_statement_list . inner_statement
  204 while_statement: ':' inner_statement_list . "endwhile (T_ENDWHILE)" ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "endwhile (T_ENDWHILE)"                       shift, and go to state 740
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 695

  135 statement: "for (T_FOR)" '(' for_exprs ';' for_exprs ';' . for_exprs ')' for_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 287 (for_exprs)

    namespace_name              go to state 83
    name                        go to state 84
    for_exprs                   go to state 741
    non_empty_for_exprs         go to state 317
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 318
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 696

  186 foreach_variable: '&' variable .
  424 dereferencable: variable .

    "=> (T_DOUBLE_ARROW)"  reduce using rule 186 (foreach_variable)
    ')'                    reduce using rule 186 (foreach_variable)
    $default               reduce using rule 424 (dereferencable)


State 697

  187 foreach_variable: "list (T_LIST)" '(' . assignment_list ')'

    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 355
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    $default  reduce using rule 460 (assignment_list_element)

    namespace_name           go to state 83
    name                     go to state 84
    function_call            go to state 100
    class_name               go to state 101
    dereferencable_scalar    go to state 132
    constant                 go to state 133
    variable_class_name      go to state 106
    dereferencable           go to state 107
    callable_expr            go to state 108
    callable_variable        go to state 109
    variable                 go to state 356
    simple_variable          go to state 111
    static_member            go to state 112
    assignment_list          go to state 742
    assignment_list_element  go to state 358


State 698

  147 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" . foreach_variable ')' foreach_statement

    '&'                                           shift, and go to state 642
    '['                                           shift, and go to state 26
    "static (T_STATIC)"                           shift, and go to state 130
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "list (T_LIST)"                               shift, and go to state 643
    "array (T_ARRAY)"                             shift, and go to state 65
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 131
    '$'                                           shift, and go to state 82

    namespace_name         go to state 83
    name                   go to state 84
    foreach_variable       go to state 743
    function_call          go to state 100
    class_name             go to state 101
    dereferencable_scalar  go to state 132
    constant               go to state 133
    variable_class_name    go to state 106
    dereferencable         go to state 107
    callable_expr          go to state 108
    callable_variable      go to state 109
    variable               go to state 645
    simple_variable        go to state 111
    static_member          go to state 112


State 699

  146 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable ')' . foreach_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 744
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 745
    foreach_statement           go to state 746
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 700

  193 declare_statement: ':' . inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 747


State 701

  192 declare_statement: statement .

    $default  reduce using rule 192 (declare_statement)


State 702

  149 statement: "declare (T_DECLARE)" '(' const_list ')' $@3 declare_statement .

    $default  reduce using rule 149 (statement)


State 703

  197 switch_case_list: ':' ';' . case_list "endswitch (T_ENDSWITCH)" ';'

    $default  reduce using rule 198 (case_list)

    case_list  go to state 748


State 704

  196 switch_case_list: ':' case_list . "endswitch (T_ENDSWITCH)" ';'
  199 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  200          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 749
    "case (T_CASE)"            shift, and go to state 750
    "default (T_DEFAULT)"      shift, and go to state 751


State 705

  195 switch_case_list: '{' ';' . case_list '}'

    $default  reduce using rule 198 (case_list)

    case_list  go to state 752


State 706

  194 switch_case_list: '{' case_list . '}'
  199 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  200          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "case (T_CASE)"        shift, and go to state 750
    "default (T_DEFAULT)"  shift, and go to state 751
    '}'                    shift, and go to state 753


State 707

  156 catch_list: catch_list "catch (T_CATCH)" . '(' name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

    '('  shift, and go to state 754


State 708

  158 finally_statement: "finally (T_FINALLY)" . '{' inner_statement_list '}'

    '{'  shift, and go to state 755


State 709

  151 statement: "try (T_TRY)" '{' inner_statement_list '}' catch_list finally_statement .

    $default  reduce using rule 151 (statement)


State 710

  107 mixed_group_use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations . '}'
  108 inline_use_declarations: inline_use_declarations . ',' inline_use_declaration

    ','  shift, and go to state 712
    '}'  shift, and go to state 756


State 711

  115 inline_use_declaration: use_type unprefixed_use_declaration .

    $default  reduce using rule 115 (inline_use_declaration)


State 712

  108 inline_use_declarations: inline_use_declarations ',' . inline_use_declaration

    "identifier (T_STRING)"  shift, and go to state 115
    "function (T_FUNCTION)"  shift, and go to state 184
    "const (T_CONST)"        shift, and go to state 185

    namespace_name              go to state 571
    use_type                    go to state 653
    inline_use_declaration      go to state 757
    unprefixed_use_declaration  go to state 656


State 713

  106 mixed_group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations '}' .

    $default  reduce using rule 106 (mixed_group_use_declaration)


State 714

  105 group_use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "\\ (T_NS_SEPARATOR)" '{' . unprefixed_use_declarations '}'

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name               go to state 571
    unprefixed_use_declarations  go to state 758
    unprefixed_use_declaration   go to state 716


State 715

  104 group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' unprefixed_use_declarations . '}'
  110 unprefixed_use_declarations: unprefixed_use_declarations . ',' unprefixed_use_declaration

    ','  shift, and go to state 759
    '}'  shift, and go to state 760


State 716

  111 unprefixed_use_declarations: unprefixed_use_declaration .

    $default  reduce using rule 111 (unprefixed_use_declarations)


State 717

  184 implements_list: "implements (T_IMPLEMENTS)" name_list .
  246 name_list: name_list . ',' name

    ','  shift, and go to state 720

    $default  reduce using rule 184 (implements_list)


State 718

  170 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment . '{' class_statement_list '}'

    '{'  shift, and go to state 761


State 719

  176 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" backup_doc_comment '{' class_statement_list . '}'
  239 class_statement_list: class_statement_list . class_statement

    "static (T_STATIC)"        shift, and go to state 762
    "abstract (T_ABSTRACT)"    shift, and go to state 763
    "final (T_FINAL)"          shift, and go to state 764
    "private (T_PRIVATE)"      shift, and go to state 765
    "protected (T_PROTECTED)"  shift, and go to state 766
    "public (T_PUBLIC)"        shift, and go to state 767
    "use (T_USE)"              shift, and go to state 768
    "var (T_VAR)"              shift, and go to state 769
    '}'                        shift, and go to state 770

    $default  reduce using rule 266 (method_modifiers)

    class_statement             go to state 771
    variable_modifiers          go to state 772
    method_modifiers            go to state 773
    non_empty_member_modifiers  go to state 774
    member_modifier             go to state 775


State 720

  246 name_list: name_list ',' . name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 776


State 721

  178 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' . class_statement_list '}'

    $default  reduce using rule 240 (class_statement_list)

    class_statement_list  go to state 777


State 722

  459 assignment_list_element: "list (T_LIST)" '(' assignment_list ')' .

    $default  reduce using rule 459 (assignment_list_element)


State 723

  295 expr_without_variable: "list (T_LIST)" '(' assignment_list ')' '=' expr .
  315                      | expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 295 (expr_without_variable)


State 724

  478 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' . '}'

    '}'  shift, and go to state 778


State 725

   94 top_statement: "namespace (T_NAMESPACE)" namespace_name $@1 '{' top_statement_list '}' .

    $default  reduce using rule 94 (top_statement)


State 726

  129 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 129 (inner_statement)


State 727

  168 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list . backup_doc_comment '{' class_statement_list '}'

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 779


State 728

  206 if_stmt_without_else: if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' statement .

    $default  reduce using rule 206 (if_stmt_without_else)


State 729

  210 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' ':' . inner_statement_list

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 780


State 730

  212 alt_if_stmt: alt_if_stmt_without_else "else (T_ELSE)" ':' inner_statement_list "endif (T_ENDIF)" ';' .

    $default  reduce using rule 212 (alt_if_stmt)


State 731

  162 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' . return_type backup_doc_comment '{' inner_statement_list '}'

    ':'  shift, and go to state 781

    $default  reduce using rule 224 (return_type)

    return_type  go to state 782


State 732

  375 lexical_vars: "use (T_USE)" . '(' lexical_var_list ')'

    '('  shift, and go to state 783


State 733

  368 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars . return_type backup_doc_comment '{' inner_statement_list '}'

    ':'  shift, and go to state 781

    $default  reduce using rule 224 (return_type)

    return_type  go to state 784


State 734

  216 non_empty_parameter_list: non_empty_parameter_list ',' parameter .

    $default  reduce using rule 216 (non_empty_parameter_list)


State 735

  166 is_variadic: "... (T_ELLIPSIS)" .

    $default  reduce using rule 166 (is_variadic)


State 736

  217 parameter: optional_type is_reference is_variadic . "variable (T_VARIABLE)"
  218          | optional_type is_reference is_variadic . "variable (T_VARIABLE)" '=' expr

    "variable (T_VARIABLE)"  shift, and go to state 785


State 737

  292 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list backup_doc_comment . '{' class_statement_list '}'

    '{'  shift, and go to state 786


State 738

  369 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars . return_type backup_doc_comment '{' inner_statement_list '}'

    ':'  shift, and go to state 781

    $default  reduce using rule 224 (return_type)

    return_type  go to state 787


State 739

  134 statement: "do (T_DO)" statement "while (T_WHILE)" '(' expr ')' ';' .

    $default  reduce using rule 134 (statement)


State 740

  204 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" . ';'

    ';'  shift, and go to state 788


State 741

  135 statement: "for (T_FOR)" '(' for_exprs ';' for_exprs ';' for_exprs . ')' for_statement

    ')'  shift, and go to state 789


State 742

  187 foreach_variable: "list (T_LIST)" '(' assignment_list . ')'
  456 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 586
    ')'  shift, and go to state 790


State 743

  147 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable . ')' foreach_statement

    ')'  shift, and go to state 791


State 744

  191 foreach_statement: ':' . inner_statement_list "endforeach (T_ENDFOREACH)" ';'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 792


State 745

  190 foreach_statement: statement .

    $default  reduce using rule 190 (foreach_statement)


State 746

  146 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable ')' foreach_statement .

    $default  reduce using rule 146 (statement)


State 747

  122 inner_statement_list: inner_statement_list . inner_statement
  193 declare_statement: ':' inner_statement_list . "enddeclare (T_ENDDECLARE)" ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "enddeclare (T_ENDDECLARE)"                   shift, and go to state 793
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 748

  197 switch_case_list: ':' ';' case_list . "endswitch (T_ENDSWITCH)" ';'
  199 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  200          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 794
    "case (T_CASE)"            shift, and go to state 750
    "default (T_DEFAULT)"      shift, and go to state 751


State 749

  196 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 795


State 750

  199 case_list: case_list "case (T_CASE)" . expr case_separator inner_statement_list

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 796
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 751

  200 case_list: case_list "default (T_DEFAULT)" . case_separator inner_statement_list

    ':'  shift, and go to state 797
    ';'  shift, and go to state 798

    case_separator  go to state 799


State 752

  195 switch_case_list: '{' ';' case_list . '}'
  199 case_list: case_list . "case (T_CASE)" expr case_separator inner_statement_list
  200          | case_list . "default (T_DEFAULT)" case_separator inner_statement_list

    "case (T_CASE)"        shift, and go to state 750
    "default (T_DEFAULT)"  shift, and go to state 751
    '}'                    shift, and go to state 800


State 753

  194 switch_case_list: '{' case_list '}' .

    $default  reduce using rule 194 (switch_case_list)


State 754

  156 catch_list: catch_list "catch (T_CATCH)" '(' . name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 801


State 755

  158 finally_statement: "finally (T_FINALLY)" '{' . inner_statement_list '}'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 802


State 756

  107 mixed_group_use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "\\ (T_NS_SEPARATOR)" '{' inline_use_declarations '}' .

    $default  reduce using rule 107 (mixed_group_use_declaration)


State 757

  108 inline_use_declarations: inline_use_declarations ',' inline_use_declaration .

    $default  reduce using rule 108 (inline_use_declarations)


State 758

  105 group_use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "\\ (T_NS_SEPARATOR)" '{' unprefixed_use_declarations . '}'
  110 unprefixed_use_declarations: unprefixed_use_declarations . ',' unprefixed_use_declaration

    ','  shift, and go to state 759
    '}'  shift, and go to state 803


State 759

  110 unprefixed_use_declarations: unprefixed_use_declarations ',' . unprefixed_use_declaration

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name              go to state 571
    unprefixed_use_declaration  go to state 804


State 760

  104 group_use_declaration: namespace_name "\\ (T_NS_SEPARATOR)" '{' unprefixed_use_declarations '}' .

    $default  reduce using rule 104 (group_use_declaration)


State 761

  170 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' . class_statement_list '}'

    $default  reduce using rule 240 (class_statement_list)

    class_statement_list  go to state 805


State 762

  273 member_modifier: "static (T_STATIC)" .

    $default  reduce using rule 273 (member_modifier)


State 763

  274 member_modifier: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 274 (member_modifier)


State 764

  275 member_modifier: "final (T_FINAL)" .

    $default  reduce using rule 275 (member_modifier)


State 765

  272 member_modifier: "private (T_PRIVATE)" .

    $default  reduce using rule 272 (member_modifier)


State 766

  271 member_modifier: "protected (T_PROTECTED)" .

    $default  reduce using rule 271 (member_modifier)


State 767

  270 member_modifier: "public (T_PUBLIC)" .

    $default  reduce using rule 270 (member_modifier)


State 768

  243 class_statement: "use (T_USE)" . name_list trait_adaptations

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 666
    name_list       go to state 806


State 769

  265 variable_modifiers: "var (T_VAR)" .

    $default  reduce using rule 265 (variable_modifiers)


State 770

  176 trait_declaration_statement: "trait (T_TRAIT)" @6 "identifier (T_STRING)" backup_doc_comment '{' class_statement_list '}' .

    $default  reduce using rule 176 (trait_declaration_statement)


State 771

  239 class_statement_list: class_statement_list class_statement .

    $default  reduce using rule 239 (class_statement_list)


State 772

  241 class_statement: variable_modifiers . property_list ';'

    "variable (T_VARIABLE)"  shift, and go to state 807

    property_list  go to state 808
    property       go to state 809


State 773

  242 class_statement: method_modifiers . "const (T_CONST)" class_const_list ';'
  244                | method_modifiers . function returns_ref identifier '(' parameter_list ')' return_type backup_doc_comment method_body

    "function (T_FUNCTION)"  shift, and go to state 50
    "const (T_CONST)"        shift, and go to state 810

    function  go to state 811


State 774

  264 variable_modifiers: non_empty_member_modifiers .
  267 method_modifiers: non_empty_member_modifiers .
  269 non_empty_member_modifiers: non_empty_member_modifiers . member_modifier

    "static (T_STATIC)"        shift, and go to state 762
    "abstract (T_ABSTRACT)"    shift, and go to state 763
    "final (T_FINAL)"          shift, and go to state 764
    "private (T_PRIVATE)"      shift, and go to state 765
    "protected (T_PROTECTED)"  shift, and go to state 766
    "public (T_PUBLIC)"        shift, and go to state 767

    "variable (T_VARIABLE)"  reduce using rule 264 (variable_modifiers)
    $default                 reduce using rule 267 (method_modifiers)

    member_modifier  go to state 812


State 775

  268 non_empty_member_modifiers: member_modifier .

    $default  reduce using rule 268 (non_empty_member_modifiers)


State 776

  246 name_list: name_list ',' name .

    $default  reduce using rule 246 (name_list)


State 777

  178 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' class_statement_list . '}'
  239 class_statement_list: class_statement_list . class_statement

    "static (T_STATIC)"        shift, and go to state 762
    "abstract (T_ABSTRACT)"    shift, and go to state 763
    "final (T_FINAL)"          shift, and go to state 764
    "private (T_PRIVATE)"      shift, and go to state 765
    "protected (T_PROTECTED)"  shift, and go to state 766
    "public (T_PUBLIC)"        shift, and go to state 767
    "use (T_USE)"              shift, and go to state 768
    "var (T_VAR)"              shift, and go to state 769
    '}'                        shift, and go to state 813

    $default  reduce using rule 266 (method_modifiers)

    class_statement             go to state 771
    variable_modifiers          go to state 772
    method_modifiers            go to state 773
    non_empty_member_modifiers  go to state 774
    member_modifier             go to state 775


State 778

  478 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}' .

    $default  reduce using rule 478 (encaps_var)


State 779

  168 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment . '{' class_statement_list '}'

    '{'  shift, and go to state 814


State 780

  122 inner_statement_list: inner_statement_list . inner_statement
  210 alt_if_stmt_without_else: alt_if_stmt_without_else "elseif (T_ELSEIF)" '(' expr ')' ':' inner_statement_list .

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 210 (alt_if_stmt_without_else)

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 781

  225 return_type: ':' . type

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 610
    "callable (T_CALLABLE)"    shift, and go to state 611
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 612
    type            go to state 815


State 782

  162 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type . backup_doc_comment '{' inner_statement_list '}'

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 816


State 783

  375 lexical_vars: "use (T_USE)" '(' . lexical_var_list ')'

    '&'                      shift, and go to state 817
    "variable (T_VARIABLE)"  shift, and go to state 818

    lexical_var_list  go to state 819
    lexical_var       go to state 820


State 784

  368 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars return_type . backup_doc_comment '{' inner_statement_list '}'

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 821


State 785

  217 parameter: optional_type is_reference is_variadic "variable (T_VARIABLE)" .
  218          | optional_type is_reference is_variadic "variable (T_VARIABLE)" . '=' expr

    '='  shift, and go to state 822

    $default  reduce using rule 217 (parameter)


State 786

  292 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list backup_doc_comment '{' . class_statement_list '}'

    $default  reduce using rule 240 (class_statement_list)

    class_statement_list  go to state 823


State 787

  369 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type . backup_doc_comment '{' inner_statement_list '}'

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 824


State 788

  204 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" ';' .

    $default  reduce using rule 204 (while_statement)


State 789

  135 statement: "for (T_FOR)" '(' for_exprs ';' for_exprs ';' for_exprs ')' . for_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 825
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 826
    for_statement               go to state 827
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 790

  187 foreach_variable: "list (T_LIST)" '(' assignment_list ')' .

    $default  reduce using rule 187 (foreach_variable)


State 791

  147 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' . foreach_statement

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    ':'                                           shift, and go to state 744
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    statement                   go to state 745
    foreach_statement           go to state 828
    if_stmt_without_else        go to state 93
    if_stmt                     go to state 94
    alt_if_stmt_without_else    go to state 95
    alt_if_stmt                 go to state 96
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 105
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 792

  122 inner_statement_list: inner_statement_list . inner_statement
  191 foreach_statement: ':' inner_statement_list . "endforeach (T_ENDFOREACH)" ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "endforeach (T_ENDFOREACH)"                   shift, and go to state 829
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 793

  193 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" . ';'

    ';'  shift, and go to state 830


State 794

  197 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 831


State 795

  196 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 196 (switch_case_list)


State 796

  199 case_list: case_list "case (T_CASE)" expr . case_separator inner_statement_list
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    ':'                           shift, and go to state 797
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267
    ';'                           shift, and go to state 798

    case_separator  go to state 832


State 797

  201 case_separator: ':' .

    $default  reduce using rule 201 (case_separator)


State 798

  202 case_separator: ';' .

    $default  reduce using rule 202 (case_separator)


State 799

  200 case_list: case_list "default (T_DEFAULT)" case_separator . inner_statement_list

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 833


State 800

  195 switch_case_list: '{' ';' case_list '}' .

    $default  reduce using rule 195 (switch_case_list)


State 801

  156 catch_list: catch_list "catch (T_CATCH)" '(' name . "variable (T_VARIABLE)" ')' '{' inner_statement_list '}'

    "variable (T_VARIABLE)"  shift, and go to state 834


State 802

  122 inner_statement_list: inner_statement_list . inner_statement
  158 finally_statement: "finally (T_FINALLY)" '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 835
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 803

  105 group_use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "\\ (T_NS_SEPARATOR)" '{' unprefixed_use_declarations '}' .

    $default  reduce using rule 105 (group_use_declaration)


State 804

  110 unprefixed_use_declarations: unprefixed_use_declarations ',' unprefixed_use_declaration .

    $default  reduce using rule 110 (unprefixed_use_declarations)


State 805

  170 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list . '}'
  239 class_statement_list: class_statement_list . class_statement

    "static (T_STATIC)"        shift, and go to state 762
    "abstract (T_ABSTRACT)"    shift, and go to state 763
    "final (T_FINAL)"          shift, and go to state 764
    "private (T_PRIVATE)"      shift, and go to state 765
    "protected (T_PROTECTED)"  shift, and go to state 766
    "public (T_PUBLIC)"        shift, and go to state 767
    "use (T_USE)"              shift, and go to state 768
    "var (T_VAR)"              shift, and go to state 769
    '}'                        shift, and go to state 836

    $default  reduce using rule 266 (method_modifiers)

    class_statement             go to state 771
    variable_modifiers          go to state 772
    method_modifiers            go to state 773
    non_empty_member_modifiers  go to state 774
    member_modifier             go to state 775


State 806

  243 class_statement: "use (T_USE)" name_list . trait_adaptations
  246 name_list: name_list . ',' name

    ','  shift, and go to state 720
    ';'  shift, and go to state 837
    '{'  shift, and go to state 838

    trait_adaptations  go to state 839


State 807

  278 property: "variable (T_VARIABLE)" . backup_doc_comment
  279         | "variable (T_VARIABLE)" . '=' expr backup_doc_comment

    '='  shift, and go to state 840

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 841


State 808

  241 class_statement: variable_modifiers property_list . ';'
  276 property_list: property_list . ',' property

    ','  shift, and go to state 842
    ';'  shift, and go to state 843


State 809

  277 property_list: property .

    $default  reduce using rule 277 (property_list)


State 810

  242 class_statement: method_modifiers "const (T_CONST)" . class_const_list ';'

    "include (T_INCLUDE)"                shift, and go to state 400
    "include_once (T_INCLUDE_ONCE)"      shift, and go to state 401
    "eval (T_EVAL)"                      shift, and go to state 402
    "require (T_REQUIRE)"                shift, and go to state 403
    "require_once (T_REQUIRE_ONCE)"      shift, and go to state 404
    "or (T_LOGICAL_OR)"                  shift, and go to state 405
    "xor (T_LOGICAL_XOR)"                shift, and go to state 406
    "and (T_LOGICAL_AND)"                shift, and go to state 407
    "print (T_PRINT)"                    shift, and go to state 408
    "yield (T_YIELD)"                    shift, and go to state 409
    "instanceof (T_INSTANCEOF)"          shift, and go to state 410
    "new (T_NEW)"                        shift, and go to state 411
    "clone (T_CLONE)"                    shift, and go to state 412
    "elseif (T_ELSEIF)"                  shift, and go to state 413
    "else (T_ELSE)"                      shift, and go to state 414
    "endif (T_ENDIF)"                    shift, and go to state 415
    "static (T_STATIC)"                  shift, and go to state 416
    "abstract (T_ABSTRACT)"              shift, and go to state 417
    "final (T_FINAL)"                    shift, and go to state 418
    "private (T_PRIVATE)"                shift, and go to state 419
    "protected (T_PROTECTED)"            shift, and go to state 420
    "public (T_PUBLIC)"                  shift, and go to state 421
    "identifier (T_STRING)"              shift, and go to state 422
    "exit (T_EXIT)"                      shift, and go to state 423
    "if (T_IF)"                          shift, and go to state 424
    "echo (T_ECHO)"                      shift, and go to state 425
    "do (T_DO)"                          shift, and go to state 426
    "while (T_WHILE)"                    shift, and go to state 427
    "endwhile (T_ENDWHILE)"              shift, and go to state 428
    "for (T_FOR)"                        shift, and go to state 429
    "endfor (T_ENDFOR)"                  shift, and go to state 430
    "foreach (T_FOREACH)"                shift, and go to state 431
    "endforeach (T_ENDFOREACH)"          shift, and go to state 432
    "declare (T_DECLARE)"                shift, and go to state 433
    "enddeclare (T_ENDDECLARE)"          shift, and go to state 434
    "as (T_AS)"                          shift, and go to state 435
    "switch (T_SWITCH)"                  shift, and go to state 436
    "endswitch (T_ENDSWITCH)"            shift, and go to state 437
    "case (T_CASE)"                      shift, and go to state 438
    "default (T_DEFAULT)"                shift, and go to state 439
    "break (T_BREAK)"                    shift, and go to state 440
    "continue (T_CONTINUE)"              shift, and go to state 441
    "goto (T_GOTO)"                      shift, and go to state 442
    "function (T_FUNCTION)"              shift, and go to state 443
    "const (T_CONST)"                    shift, and go to state 444
    "return (T_RETURN)"                  shift, and go to state 445
    "try (T_TRY)"                        shift, and go to state 446
    "catch (T_CATCH)"                    shift, and go to state 447
    "finally (T_FINALLY)"                shift, and go to state 448
    "throw (T_THROW)"                    shift, and go to state 449
    "use (T_USE)"                        shift, and go to state 450
    "insteadof (T_INSTEADOF)"            shift, and go to state 451
    "global (T_GLOBAL)"                  shift, and go to state 452
    "var (T_VAR)"                        shift, and go to state 453
    "unset (T_UNSET)"                    shift, and go to state 454
    "isset (T_ISSET)"                    shift, and go to state 455
    "empty (T_EMPTY)"                    shift, and go to state 456
    "__halt_compiler (T_HALT_COMPILER)"  shift, and go to state 457
    "class (T_CLASS)"                    shift, and go to state 458
    "trait (T_TRAIT)"                    shift, and go to state 459
    "interface (T_INTERFACE)"            shift, and go to state 460
    "extends (T_EXTENDS)"                shift, and go to state 461
    "implements (T_IMPLEMENTS)"          shift, and go to state 462
    "list (T_LIST)"                      shift, and go to state 463
    "array (T_ARRAY)"                    shift, and go to state 464
    "callable (T_CALLABLE)"              shift, and go to state 465
    "__LINE__ (T_LINE)"                  shift, and go to state 466
    "__FILE__ (T_FILE)"                  shift, and go to state 467
    "__DIR__ (T_DIR)"                    shift, and go to state 468
    "__CLASS__ (T_CLASS_C)"              shift, and go to state 469
    "__TRAIT__ (T_TRAIT_C)"              shift, and go to state 470
    "__METHOD__ (T_METHOD_C)"            shift, and go to state 471
    "__FUNCTION__ (T_FUNC_C)"            shift, and go to state 472
    "namespace (T_NAMESPACE)"            shift, and go to state 473
    "__NAMESPACE__ (T_NS_C)"             shift, and go to state 474

    reserved_non_modifiers  go to state 476
    semi_reserved           go to state 477
    identifier              go to state 844
    class_const_list        go to state 845
    class_const_decl        go to state 846


State 811

  244 class_statement: method_modifiers function . returns_ref identifier '(' parameter_list ')' return_type backup_doc_comment method_body

    '&'  shift, and go to state 235

    $default  reduce using rule 372 (returns_ref)

    returns_ref  go to state 847


State 812

  269 non_empty_member_modifiers: non_empty_member_modifiers member_modifier .

    $default  reduce using rule 269 (non_empty_member_modifiers)


State 813

  178 interface_declaration_statement: "interface (T_INTERFACE)" @7 "identifier (T_STRING)" interface_extends_list backup_doc_comment '{' class_statement_list '}' .

    $default  reduce using rule 178 (interface_declaration_statement)


State 814

  168 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' . class_statement_list '}'

    $default  reduce using rule 240 (class_statement_list)

    class_statement_list  go to state 848


State 815

  225 return_type: ':' type .

    $default  reduce using rule 225 (return_type)


State 816

  162 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment . '{' inner_statement_list '}'

    '{'  shift, and go to state 849


State 817

  379 lexical_var: '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 850


State 818

  378 lexical_var: "variable (T_VARIABLE)" .

    $default  reduce using rule 378 (lexical_var)


State 819

  375 lexical_vars: "use (T_USE)" '(' lexical_var_list . ')'
  376 lexical_var_list: lexical_var_list . ',' lexical_var

    ','  shift, and go to state 851
    ')'  shift, and go to state 852


State 820

  377 lexical_var_list: lexical_var .

    $default  reduce using rule 377 (lexical_var_list)


State 821

  368 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment . '{' inner_statement_list '}'

    '{'  shift, and go to state 853


State 822

  218 parameter: optional_type is_reference is_variadic "variable (T_VARIABLE)" '=' . expr

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 854
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 823

  239 class_statement_list: class_statement_list . class_statement
  292 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list backup_doc_comment '{' class_statement_list . '}'

    "static (T_STATIC)"        shift, and go to state 762
    "abstract (T_ABSTRACT)"    shift, and go to state 763
    "final (T_FINAL)"          shift, and go to state 764
    "private (T_PRIVATE)"      shift, and go to state 765
    "protected (T_PROTECTED)"  shift, and go to state 766
    "public (T_PUBLIC)"        shift, and go to state 767
    "use (T_USE)"              shift, and go to state 768
    "var (T_VAR)"              shift, and go to state 769
    '}'                        shift, and go to state 855

    $default  reduce using rule 266 (method_modifiers)

    class_statement             go to state 771
    variable_modifiers          go to state 772
    method_modifiers            go to state 773
    non_empty_member_modifiers  go to state 774
    member_modifier             go to state 775


State 824

  369 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment . '{' inner_statement_list '}'

    '{'  shift, and go to state 856


State 825

  189 for_statement: ':' . inner_statement_list "endfor (T_ENDFOR)" ';'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 857


State 826

  188 for_statement: statement .

    $default  reduce using rule 188 (for_statement)


State 827

  135 statement: "for (T_FOR)" '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement .

    $default  reduce using rule 135 (statement)


State 828

  147 statement: "foreach (T_FOREACH)" '(' expr "as (T_AS)" foreach_variable "=> (T_DOUBLE_ARROW)" foreach_variable ')' foreach_statement .

    $default  reduce using rule 147 (statement)


State 829

  191 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" . ';'

    ';'  shift, and go to state 858


State 830

  193 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';' .

    $default  reduce using rule 193 (declare_statement)


State 831

  197 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 197 (switch_case_list)


State 832

  199 case_list: case_list "case (T_CASE)" expr case_separator . inner_statement_list

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 859


State 833

  122 inner_statement_list: inner_statement_list . inner_statement
  200 case_list: case_list "default (T_DEFAULT)" case_separator inner_statement_list .

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 200 (case_list)

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 834

  156 catch_list: catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" . ')' '{' inner_statement_list '}'

    ')'  shift, and go to state 860


State 835

  158 finally_statement: "finally (T_FINALLY)" '{' inner_statement_list '}' .

    $default  reduce using rule 158 (finally_statement)


State 836

  170 class_declaration_statement: "class (T_CLASS)" @5 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}' .

    $default  reduce using rule 170 (class_declaration_statement)


State 837

  247 trait_adaptations: ';' .

    $default  reduce using rule 247 (trait_adaptations)


State 838

  248 trait_adaptations: '{' . '}'
  249                  | '{' . trait_adaptation_list '}'

    "include (T_INCLUDE)"                shift, and go to state 400
    "include_once (T_INCLUDE_ONCE)"      shift, and go to state 401
    "eval (T_EVAL)"                      shift, and go to state 402
    "require (T_REQUIRE)"                shift, and go to state 403
    "require_once (T_REQUIRE_ONCE)"      shift, and go to state 404
    "or (T_LOGICAL_OR)"                  shift, and go to state 405
    "xor (T_LOGICAL_XOR)"                shift, and go to state 406
    "and (T_LOGICAL_AND)"                shift, and go to state 407
    "print (T_PRINT)"                    shift, and go to state 408
    "yield (T_YIELD)"                    shift, and go to state 409
    "instanceof (T_INSTANCEOF)"          shift, and go to state 410
    "new (T_NEW)"                        shift, and go to state 411
    "clone (T_CLONE)"                    shift, and go to state 412
    "elseif (T_ELSEIF)"                  shift, and go to state 413
    "else (T_ELSE)"                      shift, and go to state 414
    "endif (T_ENDIF)"                    shift, and go to state 415
    "static (T_STATIC)"                  shift, and go to state 416
    "abstract (T_ABSTRACT)"              shift, and go to state 417
    "final (T_FINAL)"                    shift, and go to state 418
    "private (T_PRIVATE)"                shift, and go to state 419
    "protected (T_PROTECTED)"            shift, and go to state 420
    "public (T_PUBLIC)"                  shift, and go to state 421
    "identifier (T_STRING)"              shift, and go to state 861
    "exit (T_EXIT)"                      shift, and go to state 423
    "if (T_IF)"                          shift, and go to state 424
    "echo (T_ECHO)"                      shift, and go to state 425
    "do (T_DO)"                          shift, and go to state 426
    "while (T_WHILE)"                    shift, and go to state 427
    "endwhile (T_ENDWHILE)"              shift, and go to state 428
    "for (T_FOR)"                        shift, and go to state 429
    "endfor (T_ENDFOR)"                  shift, and go to state 430
    "foreach (T_FOREACH)"                shift, and go to state 431
    "endforeach (T_ENDFOREACH)"          shift, and go to state 432
    "declare (T_DECLARE)"                shift, and go to state 433
    "enddeclare (T_ENDDECLARE)"          shift, and go to state 434
    "as (T_AS)"                          shift, and go to state 435
    "switch (T_SWITCH)"                  shift, and go to state 436
    "endswitch (T_ENDSWITCH)"            shift, and go to state 437
    "case (T_CASE)"                      shift, and go to state 438
    "default (T_DEFAULT)"                shift, and go to state 439
    "break (T_BREAK)"                    shift, and go to state 440
    "continue (T_CONTINUE)"              shift, and go to state 441
    "goto (T_GOTO)"                      shift, and go to state 442
    "function (T_FUNCTION)"              shift, and go to state 443
    "const (T_CONST)"                    shift, and go to state 444
    "return (T_RETURN)"                  shift, and go to state 445
    "try (T_TRY)"                        shift, and go to state 446
    "catch (T_CATCH)"                    shift, and go to state 447
    "finally (T_FINALLY)"                shift, and go to state 448
    "throw (T_THROW)"                    shift, and go to state 449
    "use (T_USE)"                        shift, and go to state 450
    "insteadof (T_INSTEADOF)"            shift, and go to state 451
    "global (T_GLOBAL)"                  shift, and go to state 452
    "var (T_VAR)"                        shift, and go to state 453
    "unset (T_UNSET)"                    shift, and go to state 454
    "isset (T_ISSET)"                    shift, and go to state 455
    "empty (T_EMPTY)"                    shift, and go to state 456
    "__halt_compiler (T_HALT_COMPILER)"  shift, and go to state 457
    "class (T_CLASS)"                    shift, and go to state 458
    "trait (T_TRAIT)"                    shift, and go to state 459
    "interface (T_INTERFACE)"            shift, and go to state 460
    "extends (T_EXTENDS)"                shift, and go to state 461
    "implements (T_IMPLEMENTS)"          shift, and go to state 462
    "list (T_LIST)"                      shift, and go to state 463
    "array (T_ARRAY)"                    shift, and go to state 464
    "callable (T_CALLABLE)"              shift, and go to state 465
    "__LINE__ (T_LINE)"                  shift, and go to state 466
    "__FILE__ (T_FILE)"                  shift, and go to state 467
    "__DIR__ (T_DIR)"                    shift, and go to state 468
    "__CLASS__ (T_CLASS_C)"              shift, and go to state 469
    "__TRAIT__ (T_TRAIT_C)"              shift, and go to state 470
    "__METHOD__ (T_METHOD_C)"            shift, and go to state 471
    "__FUNCTION__ (T_FUNC_C)"            shift, and go to state 472
    "namespace (T_NAMESPACE)"            shift, and go to state 862
    "__NAMESPACE__ (T_NS_C)"             shift, and go to state 474
    "\\ (T_NS_SEPARATOR)"                shift, and go to state 76
    '}'                                  shift, and go to state 863

    reserved_non_modifiers           go to state 476
    semi_reserved                    go to state 477
    identifier                       go to state 864
    namespace_name                   go to state 83
    name                             go to state 865
    trait_adaptation_list            go to state 866
    trait_adaptation                 go to state 867
    trait_precedence                 go to state 868
    trait_alias                      go to state 869
    trait_method_reference           go to state 870
    absolute_trait_method_reference  go to state 871


State 839

  243 class_statement: "use (T_USE)" name_list trait_adaptations .

    $default  reduce using rule 243 (class_statement)


State 840

  279 property: "variable (T_VARIABLE)" '=' . expr backup_doc_comment

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 872
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 841

  278 property: "variable (T_VARIABLE)" backup_doc_comment .

    $default  reduce using rule 278 (property)


State 842

  276 property_list: property_list ',' . property

    "variable (T_VARIABLE)"  shift, and go to state 807

    property  go to state 873


State 843

  241 class_statement: variable_modifiers property_list ';' .

    $default  reduce using rule 241 (class_statement)


State 844

  282 class_const_decl: identifier . '=' expr backup_doc_comment

    '='  shift, and go to state 874


State 845

  242 class_statement: method_modifiers "const (T_CONST)" class_const_list . ';'
  280 class_const_list: class_const_list . ',' class_const_decl

    ','  shift, and go to state 875
    ';'  shift, and go to state 876


State 846

  281 class_const_list: class_const_decl .

    $default  reduce using rule 281 (class_const_list)


State 847

  244 class_statement: method_modifiers function returns_ref . identifier '(' parameter_list ')' return_type backup_doc_comment method_body

    "include (T_INCLUDE)"                shift, and go to state 400
    "include_once (T_INCLUDE_ONCE)"      shift, and go to state 401
    "eval (T_EVAL)"                      shift, and go to state 402
    "require (T_REQUIRE)"                shift, and go to state 403
    "require_once (T_REQUIRE_ONCE)"      shift, and go to state 404
    "or (T_LOGICAL_OR)"                  shift, and go to state 405
    "xor (T_LOGICAL_XOR)"                shift, and go to state 406
    "and (T_LOGICAL_AND)"                shift, and go to state 407
    "print (T_PRINT)"                    shift, and go to state 408
    "yield (T_YIELD)"                    shift, and go to state 409
    "instanceof (T_INSTANCEOF)"          shift, and go to state 410
    "new (T_NEW)"                        shift, and go to state 411
    "clone (T_CLONE)"                    shift, and go to state 412
    "elseif (T_ELSEIF)"                  shift, and go to state 413
    "else (T_ELSE)"                      shift, and go to state 414
    "endif (T_ENDIF)"                    shift, and go to state 415
    "static (T_STATIC)"                  shift, and go to state 416
    "abstract (T_ABSTRACT)"              shift, and go to state 417
    "final (T_FINAL)"                    shift, and go to state 418
    "private (T_PRIVATE)"                shift, and go to state 419
    "protected (T_PROTECTED)"            shift, and go to state 420
    "public (T_PUBLIC)"                  shift, and go to state 421
    "identifier (T_STRING)"              shift, and go to state 422
    "exit (T_EXIT)"                      shift, and go to state 423
    "if (T_IF)"                          shift, and go to state 424
    "echo (T_ECHO)"                      shift, and go to state 425
    "do (T_DO)"                          shift, and go to state 426
    "while (T_WHILE)"                    shift, and go to state 427
    "endwhile (T_ENDWHILE)"              shift, and go to state 428
    "for (T_FOR)"                        shift, and go to state 429
    "endfor (T_ENDFOR)"                  shift, and go to state 430
    "foreach (T_FOREACH)"                shift, and go to state 431
    "endforeach (T_ENDFOREACH)"          shift, and go to state 432
    "declare (T_DECLARE)"                shift, and go to state 433
    "enddeclare (T_ENDDECLARE)"          shift, and go to state 434
    "as (T_AS)"                          shift, and go to state 435
    "switch (T_SWITCH)"                  shift, and go to state 436
    "endswitch (T_ENDSWITCH)"            shift, and go to state 437
    "case (T_CASE)"                      shift, and go to state 438
    "default (T_DEFAULT)"                shift, and go to state 439
    "break (T_BREAK)"                    shift, and go to state 440
    "continue (T_CONTINUE)"              shift, and go to state 441
    "goto (T_GOTO)"                      shift, and go to state 442
    "function (T_FUNCTION)"              shift, and go to state 443
    "const (T_CONST)"                    shift, and go to state 444
    "return (T_RETURN)"                  shift, and go to state 445
    "try (T_TRY)"                        shift, and go to state 446
    "catch (T_CATCH)"                    shift, and go to state 447
    "finally (T_FINALLY)"                shift, and go to state 448
    "throw (T_THROW)"                    shift, and go to state 449
    "use (T_USE)"                        shift, and go to state 450
    "insteadof (T_INSTEADOF)"            shift, and go to state 451
    "global (T_GLOBAL)"                  shift, and go to state 452
    "var (T_VAR)"                        shift, and go to state 453
    "unset (T_UNSET)"                    shift, and go to state 454
    "isset (T_ISSET)"                    shift, and go to state 455
    "empty (T_EMPTY)"                    shift, and go to state 456
    "__halt_compiler (T_HALT_COMPILER)"  shift, and go to state 457
    "class (T_CLASS)"                    shift, and go to state 458
    "trait (T_TRAIT)"                    shift, and go to state 459
    "interface (T_INTERFACE)"            shift, and go to state 460
    "extends (T_EXTENDS)"                shift, and go to state 461
    "implements (T_IMPLEMENTS)"          shift, and go to state 462
    "list (T_LIST)"                      shift, and go to state 463
    "array (T_ARRAY)"                    shift, and go to state 464
    "callable (T_CALLABLE)"              shift, and go to state 465
    "__LINE__ (T_LINE)"                  shift, and go to state 466
    "__FILE__ (T_FILE)"                  shift, and go to state 467
    "__DIR__ (T_DIR)"                    shift, and go to state 468
    "__CLASS__ (T_CLASS_C)"              shift, and go to state 469
    "__TRAIT__ (T_TRAIT_C)"              shift, and go to state 470
    "__METHOD__ (T_METHOD_C)"            shift, and go to state 471
    "__FUNCTION__ (T_FUNC_C)"            shift, and go to state 472
    "namespace (T_NAMESPACE)"            shift, and go to state 473
    "__NAMESPACE__ (T_NS_C)"             shift, and go to state 474

    reserved_non_modifiers  go to state 476
    semi_reserved           go to state 477
    identifier              go to state 877


State 848

  168 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list . '}'
  239 class_statement_list: class_statement_list . class_statement

    "static (T_STATIC)"        shift, and go to state 762
    "abstract (T_ABSTRACT)"    shift, and go to state 763
    "final (T_FINAL)"          shift, and go to state 764
    "private (T_PRIVATE)"      shift, and go to state 765
    "protected (T_PROTECTED)"  shift, and go to state 766
    "public (T_PUBLIC)"        shift, and go to state 767
    "use (T_USE)"              shift, and go to state 768
    "var (T_VAR)"              shift, and go to state 769
    '}'                        shift, and go to state 878

    $default  reduce using rule 266 (method_modifiers)

    class_statement             go to state 771
    variable_modifiers          go to state 772
    method_modifiers            go to state 773
    non_empty_member_modifiers  go to state 774
    member_modifier             go to state 775


State 849

  162 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' . inner_statement_list '}'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 879


State 850

  379 lexical_var: '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 379 (lexical_var)


State 851

  376 lexical_var_list: lexical_var_list ',' . lexical_var

    '&'                      shift, and go to state 817
    "variable (T_VARIABLE)"  shift, and go to state 818

    lexical_var  go to state 880


State 852

  375 lexical_vars: "use (T_USE)" '(' lexical_var_list ')' .

    $default  reduce using rule 375 (lexical_vars)


State 853

  368 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' . inner_statement_list '}'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 881


State 854

  218 parameter: optional_type is_reference is_variadic "variable (T_VARIABLE)" '=' expr .
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 218 (parameter)


State 855

  292 anonymous_class: "class (T_CLASS)" @8 ctor_arguments extends_from implements_list backup_doc_comment '{' class_statement_list '}' .

    $default  reduce using rule 292 (anonymous_class)


State 856

  369 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' . inner_statement_list '}'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 882


State 857

  122 inner_statement_list: inner_statement_list . inner_statement
  189 for_statement: ':' inner_statement_list . "endfor (T_ENDFOR)" ';'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "endfor (T_ENDFOR)"                           shift, and go to state 883
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 858

  191 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';' .

    $default  reduce using rule 191 (foreach_statement)


State 859

  122 inner_statement_list: inner_statement_list . inner_statement
  199 case_list: case_list "case (T_CASE)" expr case_separator inner_statement_list .

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    $default  reduce using rule 199 (case_list)

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 860

  156 catch_list: catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' . '{' inner_statement_list '}'

    '{'  shift, and go to state 884


State 861

   77 identifier: "identifier (T_STRING)" .
   81 namespace_name: "identifier (T_STRING)" .

    "as (T_AS)"  reduce using rule 77 (identifier)
    $default     reduce using rule 81 (namespace_name)


State 862

   57 reserved_non_modifiers: "namespace (T_NAMESPACE)" .
   84 name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 212

    $default  reduce using rule 57 (reserved_non_modifiers)


State 863

  248 trait_adaptations: '{' '}' .

    $default  reduce using rule 248 (trait_adaptations)


State 864

  259 trait_method_reference: identifier .

    $default  reduce using rule 259 (trait_method_reference)


State 865

  261 absolute_trait_method_reference: name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 885


State 866

  249 trait_adaptations: '{' trait_adaptation_list . '}'
  251 trait_adaptation_list: trait_adaptation_list . trait_adaptation

    "include (T_INCLUDE)"                shift, and go to state 400
    "include_once (T_INCLUDE_ONCE)"      shift, and go to state 401
    "eval (T_EVAL)"                      shift, and go to state 402
    "require (T_REQUIRE)"                shift, and go to state 403
    "require_once (T_REQUIRE_ONCE)"      shift, and go to state 404
    "or (T_LOGICAL_OR)"                  shift, and go to state 405
    "xor (T_LOGICAL_XOR)"                shift, and go to state 406
    "and (T_LOGICAL_AND)"                shift, and go to state 407
    "print (T_PRINT)"                    shift, and go to state 408
    "yield (T_YIELD)"                    shift, and go to state 409
    "instanceof (T_INSTANCEOF)"          shift, and go to state 410
    "new (T_NEW)"                        shift, and go to state 411
    "clone (T_CLONE)"                    shift, and go to state 412
    "elseif (T_ELSEIF)"                  shift, and go to state 413
    "else (T_ELSE)"                      shift, and go to state 414
    "endif (T_ENDIF)"                    shift, and go to state 415
    "static (T_STATIC)"                  shift, and go to state 416
    "abstract (T_ABSTRACT)"              shift, and go to state 417
    "final (T_FINAL)"                    shift, and go to state 418
    "private (T_PRIVATE)"                shift, and go to state 419
    "protected (T_PROTECTED)"            shift, and go to state 420
    "public (T_PUBLIC)"                  shift, and go to state 421
    "identifier (T_STRING)"              shift, and go to state 861
    "exit (T_EXIT)"                      shift, and go to state 423
    "if (T_IF)"                          shift, and go to state 424
    "echo (T_ECHO)"                      shift, and go to state 425
    "do (T_DO)"                          shift, and go to state 426
    "while (T_WHILE)"                    shift, and go to state 427
    "endwhile (T_ENDWHILE)"              shift, and go to state 428
    "for (T_FOR)"                        shift, and go to state 429
    "endfor (T_ENDFOR)"                  shift, and go to state 430
    "foreach (T_FOREACH)"                shift, and go to state 431
    "endforeach (T_ENDFOREACH)"          shift, and go to state 432
    "declare (T_DECLARE)"                shift, and go to state 433
    "enddeclare (T_ENDDECLARE)"          shift, and go to state 434
    "as (T_AS)"                          shift, and go to state 435
    "switch (T_SWITCH)"                  shift, and go to state 436
    "endswitch (T_ENDSWITCH)"            shift, and go to state 437
    "case (T_CASE)"                      shift, and go to state 438
    "default (T_DEFAULT)"                shift, and go to state 439
    "break (T_BREAK)"                    shift, and go to state 440
    "continue (T_CONTINUE)"              shift, and go to state 441
    "goto (T_GOTO)"                      shift, and go to state 442
    "function (T_FUNCTION)"              shift, and go to state 443
    "const (T_CONST)"                    shift, and go to state 444
    "return (T_RETURN)"                  shift, and go to state 445
    "try (T_TRY)"                        shift, and go to state 446
    "catch (T_CATCH)"                    shift, and go to state 447
    "finally (T_FINALLY)"                shift, and go to state 448
    "throw (T_THROW)"                    shift, and go to state 449
    "use (T_USE)"                        shift, and go to state 450
    "insteadof (T_INSTEADOF)"            shift, and go to state 451
    "global (T_GLOBAL)"                  shift, and go to state 452
    "var (T_VAR)"                        shift, and go to state 453
    "unset (T_UNSET)"                    shift, and go to state 454
    "isset (T_ISSET)"                    shift, and go to state 455
    "empty (T_EMPTY)"                    shift, and go to state 456
    "__halt_compiler (T_HALT_COMPILER)"  shift, and go to state 457
    "class (T_CLASS)"                    shift, and go to state 458
    "trait (T_TRAIT)"                    shift, and go to state 459
    "interface (T_INTERFACE)"            shift, and go to state 460
    "extends (T_EXTENDS)"                shift, and go to state 461
    "implements (T_IMPLEMENTS)"          shift, and go to state 462
    "list (T_LIST)"                      shift, and go to state 463
    "array (T_ARRAY)"                    shift, and go to state 464
    "callable (T_CALLABLE)"              shift, and go to state 465
    "__LINE__ (T_LINE)"                  shift, and go to state 466
    "__FILE__ (T_FILE)"                  shift, and go to state 467
    "__DIR__ (T_DIR)"                    shift, and go to state 468
    "__CLASS__ (T_CLASS_C)"              shift, and go to state 469
    "__TRAIT__ (T_TRAIT_C)"              shift, and go to state 470
    "__METHOD__ (T_METHOD_C)"            shift, and go to state 471
    "__FUNCTION__ (T_FUNC_C)"            shift, and go to state 472
    "namespace (T_NAMESPACE)"            shift, and go to state 862
    "__NAMESPACE__ (T_NS_C)"             shift, and go to state 474
    "\\ (T_NS_SEPARATOR)"                shift, and go to state 76
    '}'                                  shift, and go to state 886

    reserved_non_modifiers           go to state 476
    semi_reserved                    go to state 477
    identifier                       go to state 864
    namespace_name                   go to state 83
    name                             go to state 865
    trait_adaptation                 go to state 887
    trait_precedence                 go to state 868
    trait_alias                      go to state 869
    trait_method_reference           go to state 870
    absolute_trait_method_reference  go to state 871


State 867

  250 trait_adaptation_list: trait_adaptation .

    $default  reduce using rule 250 (trait_adaptation_list)


State 868

  252 trait_adaptation: trait_precedence . ';'

    ';'  shift, and go to state 888


State 869

  253 trait_adaptation: trait_alias . ';'

    ';'  shift, and go to state 889


State 870

  255 trait_alias: trait_method_reference . "as (T_AS)" "identifier (T_STRING)"
  256            | trait_method_reference . "as (T_AS)" reserved_non_modifiers
  257            | trait_method_reference . "as (T_AS)" member_modifier identifier
  258            | trait_method_reference . "as (T_AS)" member_modifier

    "as (T_AS)"  shift, and go to state 890


State 871

  254 trait_precedence: absolute_trait_method_reference . "insteadof (T_INSTEADOF)" name_list
  260 trait_method_reference: absolute_trait_method_reference .

    "insteadof (T_INSTEADOF)"  shift, and go to state 891

    $default  reduce using rule 260 (trait_method_reference)


State 872

  279 property: "variable (T_VARIABLE)" '=' expr . backup_doc_comment
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 892


State 873

  276 property_list: property_list ',' property .

    $default  reduce using rule 276 (property_list)


State 874

  282 class_const_decl: identifier '=' . expr backup_doc_comment

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 114
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "function (T_FUNCTION)"                       shift, and go to state 50
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name              go to state 83
    name                        go to state 84
    new_expr                    go to state 97
    expr_without_variable       go to state 98
    function                    go to state 117
    function_call               go to state 100
    class_name                  go to state 101
    dereferencable_scalar       go to state 102
    scalar                      go to state 103
    constant                    go to state 104
    expr                        go to state 893
    variable_class_name         go to state 106
    dereferencable              go to state 107
    callable_expr               go to state 108
    callable_variable           go to state 109
    variable                    go to state 110
    simple_variable             go to state 111
    static_member               go to state 112
    internal_functions_in_yacc  go to state 113


State 875

  280 class_const_list: class_const_list ',' . class_const_decl

    "include (T_INCLUDE)"                shift, and go to state 400
    "include_once (T_INCLUDE_ONCE)"      shift, and go to state 401
    "eval (T_EVAL)"                      shift, and go to state 402
    "require (T_REQUIRE)"                shift, and go to state 403
    "require_once (T_REQUIRE_ONCE)"      shift, and go to state 404
    "or (T_LOGICAL_OR)"                  shift, and go to state 405
    "xor (T_LOGICAL_XOR)"                shift, and go to state 406
    "and (T_LOGICAL_AND)"                shift, and go to state 407
    "print (T_PRINT)"                    shift, and go to state 408
    "yield (T_YIELD)"                    shift, and go to state 409
    "instanceof (T_INSTANCEOF)"          shift, and go to state 410
    "new (T_NEW)"                        shift, and go to state 411
    "clone (T_CLONE)"                    shift, and go to state 412
    "elseif (T_ELSEIF)"                  shift, and go to state 413
    "else (T_ELSE)"                      shift, and go to state 414
    "endif (T_ENDIF)"                    shift, and go to state 415
    "static (T_STATIC)"                  shift, and go to state 416
    "abstract (T_ABSTRACT)"              shift, and go to state 417
    "final (T_FINAL)"                    shift, and go to state 418
    "private (T_PRIVATE)"                shift, and go to state 419
    "protected (T_PROTECTED)"            shift, and go to state 420
    "public (T_PUBLIC)"                  shift, and go to state 421
    "identifier (T_STRING)"              shift, and go to state 422
    "exit (T_EXIT)"                      shift, and go to state 423
    "if (T_IF)"                          shift, and go to state 424
    "echo (T_ECHO)"                      shift, and go to state 425
    "do (T_DO)"                          shift, and go to state 426
    "while (T_WHILE)"                    shift, and go to state 427
    "endwhile (T_ENDWHILE)"              shift, and go to state 428
    "for (T_FOR)"                        shift, and go to state 429
    "endfor (T_ENDFOR)"                  shift, and go to state 430
    "foreach (T_FOREACH)"                shift, and go to state 431
    "endforeach (T_ENDFOREACH)"          shift, and go to state 432
    "declare (T_DECLARE)"                shift, and go to state 433
    "enddeclare (T_ENDDECLARE)"          shift, and go to state 434
    "as (T_AS)"                          shift, and go to state 435
    "switch (T_SWITCH)"                  shift, and go to state 436
    "endswitch (T_ENDSWITCH)"            shift, and go to state 437
    "case (T_CASE)"                      shift, and go to state 438
    "default (T_DEFAULT)"                shift, and go to state 439
    "break (T_BREAK)"                    shift, and go to state 440
    "continue (T_CONTINUE)"              shift, and go to state 441
    "goto (T_GOTO)"                      shift, and go to state 442
    "function (T_FUNCTION)"              shift, and go to state 443
    "const (T_CONST)"                    shift, and go to state 444
    "return (T_RETURN)"                  shift, and go to state 445
    "try (T_TRY)"                        shift, and go to state 446
    "catch (T_CATCH)"                    shift, and go to state 447
    "finally (T_FINALLY)"                shift, and go to state 448
    "throw (T_THROW)"                    shift, and go to state 449
    "use (T_USE)"                        shift, and go to state 450
    "insteadof (T_INSTEADOF)"            shift, and go to state 451
    "global (T_GLOBAL)"                  shift, and go to state 452
    "var (T_VAR)"                        shift, and go to state 453
    "unset (T_UNSET)"                    shift, and go to state 454
    "isset (T_ISSET)"                    shift, and go to state 455
    "empty (T_EMPTY)"                    shift, and go to state 456
    "__halt_compiler (T_HALT_COMPILER)"  shift, and go to state 457
    "class (T_CLASS)"                    shift, and go to state 458
    "trait (T_TRAIT)"                    shift, and go to state 459
    "interface (T_INTERFACE)"            shift, and go to state 460
    "extends (T_EXTENDS)"                shift, and go to state 461
    "implements (T_IMPLEMENTS)"          shift, and go to state 462
    "list (T_LIST)"                      shift, and go to state 463
    "array (T_ARRAY)"                    shift, and go to state 464
    "callable (T_CALLABLE)"              shift, and go to state 465
    "__LINE__ (T_LINE)"                  shift, and go to state 466
    "__FILE__ (T_FILE)"                  shift, and go to state 467
    "__DIR__ (T_DIR)"                    shift, and go to state 468
    "__CLASS__ (T_CLASS_C)"              shift, and go to state 469
    "__TRAIT__ (T_TRAIT_C)"              shift, and go to state 470
    "__METHOD__ (T_METHOD_C)"            shift, and go to state 471
    "__FUNCTION__ (T_FUNC_C)"            shift, and go to state 472
    "namespace (T_NAMESPACE)"            shift, and go to state 473
    "__NAMESPACE__ (T_NS_C)"             shift, and go to state 474

    reserved_non_modifiers  go to state 476
    semi_reserved           go to state 477
    identifier              go to state 844
    class_const_decl        go to state 894


State 876

  242 class_statement: method_modifiers "const (T_CONST)" class_const_list ';' .

    $default  reduce using rule 242 (class_statement)


State 877

  244 class_statement: method_modifiers function returns_ref identifier . '(' parameter_list ')' return_type backup_doc_comment method_body

    '('  shift, and go to state 895


State 878

  168 class_declaration_statement: class_modifiers "class (T_CLASS)" @4 "identifier (T_STRING)" extends_from implements_list backup_doc_comment '{' class_statement_list '}' .

    $default  reduce using rule 168 (class_declaration_statement)


State 879

  122 inner_statement_list: inner_statement_list . inner_statement
  162 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 896
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 880

  376 lexical_var_list: lexical_var_list ',' lexical_var .

    $default  reduce using rule 376 (lexical_var_list)


State 881

  122 inner_statement_list: inner_statement_list . inner_statement
  368 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 897
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 882

  122 inner_statement_list: inner_statement_list . inner_statement
  369 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 898
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 883

  189 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" . ';'

    ';'  shift, and go to state 899


State 884

  156 catch_list: catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' '{' . inner_statement_list '}'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 900


State 885

  261 absolute_trait_method_reference: name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . identifier

    "include (T_INCLUDE)"                shift, and go to state 400
    "include_once (T_INCLUDE_ONCE)"      shift, and go to state 401
    "eval (T_EVAL)"                      shift, and go to state 402
    "require (T_REQUIRE)"                shift, and go to state 403
    "require_once (T_REQUIRE_ONCE)"      shift, and go to state 404
    "or (T_LOGICAL_OR)"                  shift, and go to state 405
    "xor (T_LOGICAL_XOR)"                shift, and go to state 406
    "and (T_LOGICAL_AND)"                shift, and go to state 407
    "print (T_PRINT)"                    shift, and go to state 408
    "yield (T_YIELD)"                    shift, and go to state 409
    "instanceof (T_INSTANCEOF)"          shift, and go to state 410
    "new (T_NEW)"                        shift, and go to state 411
    "clone (T_CLONE)"                    shift, and go to state 412
    "elseif (T_ELSEIF)"                  shift, and go to state 413
    "else (T_ELSE)"                      shift, and go to state 414
    "endif (T_ENDIF)"                    shift, and go to state 415
    "static (T_STATIC)"                  shift, and go to state 416
    "abstract (T_ABSTRACT)"              shift, and go to state 417
    "final (T_FINAL)"                    shift, and go to state 418
    "private (T_PRIVATE)"                shift, and go to state 419
    "protected (T_PROTECTED)"            shift, and go to state 420
    "public (T_PUBLIC)"                  shift, and go to state 421
    "identifier (T_STRING)"              shift, and go to state 422
    "exit (T_EXIT)"                      shift, and go to state 423
    "if (T_IF)"                          shift, and go to state 424
    "echo (T_ECHO)"                      shift, and go to state 425
    "do (T_DO)"                          shift, and go to state 426
    "while (T_WHILE)"                    shift, and go to state 427
    "endwhile (T_ENDWHILE)"              shift, and go to state 428
    "for (T_FOR)"                        shift, and go to state 429
    "endfor (T_ENDFOR)"                  shift, and go to state 430
    "foreach (T_FOREACH)"                shift, and go to state 431
    "endforeach (T_ENDFOREACH)"          shift, and go to state 432
    "declare (T_DECLARE)"                shift, and go to state 433
    "enddeclare (T_ENDDECLARE)"          shift, and go to state 434
    "as (T_AS)"                          shift, and go to state 435
    "switch (T_SWITCH)"                  shift, and go to state 436
    "endswitch (T_ENDSWITCH)"            shift, and go to state 437
    "case (T_CASE)"                      shift, and go to state 438
    "default (T_DEFAULT)"                shift, and go to state 439
    "break (T_BREAK)"                    shift, and go to state 440
    "continue (T_CONTINUE)"              shift, and go to state 441
    "goto (T_GOTO)"                      shift, and go to state 442
    "function (T_FUNCTION)"              shift, and go to state 443
    "const (T_CONST)"                    shift, and go to state 444
    "return (T_RETURN)"                  shift, and go to state 445
    "try (T_TRY)"                        shift, and go to state 446
    "catch (T_CATCH)"                    shift, and go to state 447
    "finally (T_FINALLY)"                shift, and go to state 448
    "throw (T_THROW)"                    shift, and go to state 449
    "use (T_USE)"                        shift, and go to state 450
    "insteadof (T_INSTEADOF)"            shift, and go to state 451
    "global (T_GLOBAL)"                  shift, and go to state 452
    "var (T_VAR)"                        shift, and go to state 453
    "unset (T_UNSET)"                    shift, and go to state 454
    "isset (T_ISSET)"                    shift, and go to state 455
    "empty (T_EMPTY)"                    shift, and go to state 456
    "__halt_compiler (T_HALT_COMPILER)"  shift, and go to state 457
    "class (T_CLASS)"                    shift, and go to state 458
    "trait (T_TRAIT)"                    shift, and go to state 459
    "interface (T_INTERFACE)"            shift, and go to state 460
    "extends (T_EXTENDS)"                shift, and go to state 461
    "implements (T_IMPLEMENTS)"          shift, and go to state 462
    "list (T_LIST)"                      shift, and go to state 463
    "array (T_ARRAY)"                    shift, and go to state 464
    "callable (T_CALLABLE)"              shift, and go to state 465
    "__LINE__ (T_LINE)"                  shift, and go to state 466
    "__FILE__ (T_FILE)"                  shift, and go to state 467
    "__DIR__ (T_DIR)"                    shift, and go to state 468
    "__CLASS__ (T_CLASS_C)"              shift, and go to state 469
    "__TRAIT__ (T_TRAIT_C)"              shift, and go to state 470
    "__METHOD__ (T_METHOD_C)"            shift, and go to state 471
    "__FUNCTION__ (T_FUNC_C)"            shift, and go to state 472
    "namespace (T_NAMESPACE)"            shift, and go to state 473
    "__NAMESPACE__ (T_NS_C)"             shift, and go to state 474

    reserved_non_modifiers  go to state 476
    semi_reserved           go to state 477
    identifier              go to state 901


State 886

  249 trait_adaptations: '{' trait_adaptation_list '}' .

    $default  reduce using rule 249 (trait_adaptations)


State 887

  251 trait_adaptation_list: trait_adaptation_list trait_adaptation .

    $default  reduce using rule 251 (trait_adaptation_list)


State 888

  252 trait_adaptation: trait_precedence ';' .

    $default  reduce using rule 252 (trait_adaptation)


State 889

  253 trait_adaptation: trait_alias ';' .

    $default  reduce using rule 253 (trait_adaptation)


State 890

  255 trait_alias: trait_method_reference "as (T_AS)" . "identifier (T_STRING)"
  256            | trait_method_reference "as (T_AS)" . reserved_non_modifiers
  257            | trait_method_reference "as (T_AS)" . member_modifier identifier
  258            | trait_method_reference "as (T_AS)" . member_modifier

    "include (T_INCLUDE)"                shift, and go to state 400
    "include_once (T_INCLUDE_ONCE)"      shift, and go to state 401
    "eval (T_EVAL)"                      shift, and go to state 402
    "require (T_REQUIRE)"                shift, and go to state 403
    "require_once (T_REQUIRE_ONCE)"      shift, and go to state 404
    "or (T_LOGICAL_OR)"                  shift, and go to state 405
    "xor (T_LOGICAL_XOR)"                shift, and go to state 406
    "and (T_LOGICAL_AND)"                shift, and go to state 407
    "print (T_PRINT)"                    shift, and go to state 408
    "yield (T_YIELD)"                    shift, and go to state 409
    "instanceof (T_INSTANCEOF)"          shift, and go to state 410
    "new (T_NEW)"                        shift, and go to state 411
    "clone (T_CLONE)"                    shift, and go to state 412
    "elseif (T_ELSEIF)"                  shift, and go to state 413
    "else (T_ELSE)"                      shift, and go to state 414
    "endif (T_ENDIF)"                    shift, and go to state 415
    "static (T_STATIC)"                  shift, and go to state 762
    "abstract (T_ABSTRACT)"              shift, and go to state 763
    "final (T_FINAL)"                    shift, and go to state 764
    "private (T_PRIVATE)"                shift, and go to state 765
    "protected (T_PROTECTED)"            shift, and go to state 766
    "public (T_PUBLIC)"                  shift, and go to state 767
    "identifier (T_STRING)"              shift, and go to state 902
    "exit (T_EXIT)"                      shift, and go to state 423
    "if (T_IF)"                          shift, and go to state 424
    "echo (T_ECHO)"                      shift, and go to state 425
    "do (T_DO)"                          shift, and go to state 426
    "while (T_WHILE)"                    shift, and go to state 427
    "endwhile (T_ENDWHILE)"              shift, and go to state 428
    "for (T_FOR)"                        shift, and go to state 429
    "endfor (T_ENDFOR)"                  shift, and go to state 430
    "foreach (T_FOREACH)"                shift, and go to state 431
    "endforeach (T_ENDFOREACH)"          shift, and go to state 432
    "declare (T_DECLARE)"                shift, and go to state 433
    "enddeclare (T_ENDDECLARE)"          shift, and go to state 434
    "as (T_AS)"                          shift, and go to state 435
    "switch (T_SWITCH)"                  shift, and go to state 436
    "endswitch (T_ENDSWITCH)"            shift, and go to state 437
    "case (T_CASE)"                      shift, and go to state 438
    "default (T_DEFAULT)"                shift, and go to state 439
    "break (T_BREAK)"                    shift, and go to state 440
    "continue (T_CONTINUE)"              shift, and go to state 441
    "goto (T_GOTO)"                      shift, and go to state 442
    "function (T_FUNCTION)"              shift, and go to state 443
    "const (T_CONST)"                    shift, and go to state 444
    "return (T_RETURN)"                  shift, and go to state 445
    "try (T_TRY)"                        shift, and go to state 446
    "catch (T_CATCH)"                    shift, and go to state 447
    "finally (T_FINALLY)"                shift, and go to state 448
    "throw (T_THROW)"                    shift, and go to state 449
    "use (T_USE)"                        shift, and go to state 450
    "insteadof (T_INSTEADOF)"            shift, and go to state 451
    "global (T_GLOBAL)"                  shift, and go to state 452
    "var (T_VAR)"                        shift, and go to state 453
    "unset (T_UNSET)"                    shift, and go to state 454
    "isset (T_ISSET)"                    shift, and go to state 455
    "empty (T_EMPTY)"                    shift, and go to state 456
    "__halt_compiler (T_HALT_COMPILER)"  shift, and go to state 457
    "class (T_CLASS)"                    shift, and go to state 458
    "trait (T_TRAIT)"                    shift, and go to state 459
    "interface (T_INTERFACE)"            shift, and go to state 460
    "extends (T_EXTENDS)"                shift, and go to state 461
    "implements (T_IMPLEMENTS)"          shift, and go to state 462
    "list (T_LIST)"                      shift, and go to state 463
    "array (T_ARRAY)"                    shift, and go to state 464
    "callable (T_CALLABLE)"              shift, and go to state 465
    "__LINE__ (T_LINE)"                  shift, and go to state 466
    "__FILE__ (T_FILE)"                  shift, and go to state 467
    "__DIR__ (T_DIR)"                    shift, and go to state 468
    "__CLASS__ (T_CLASS_C)"              shift, and go to state 469
    "__TRAIT__ (T_TRAIT_C)"              shift, and go to state 470
    "__METHOD__ (T_METHOD_C)"            shift, and go to state 471
    "__FUNCTION__ (T_FUNC_C)"            shift, and go to state 472
    "namespace (T_NAMESPACE)"            shift, and go to state 473
    "__NAMESPACE__ (T_NS_C)"             shift, and go to state 474

    reserved_non_modifiers  go to state 903
    member_modifier         go to state 904


State 891

  254 trait_precedence: absolute_trait_method_reference "insteadof (T_INSTEADOF)" . name_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    namespace_name  go to state 83
    name            go to state 666
    name_list       go to state 905


State 892

  279 property: "variable (T_VARIABLE)" '=' expr backup_doc_comment .

    $default  reduce using rule 279 (property)


State 893

  282 class_const_decl: identifier '=' expr . backup_doc_comment
  315 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" expr
  316                      | expr . "&& (T_BOOLEAN_AND)" expr
  317                      | expr . "or (T_LOGICAL_OR)" expr
  318                      | expr . "and (T_LOGICAL_AND)" expr
  319                      | expr . "xor (T_LOGICAL_XOR)" expr
  320                      | expr . '|' expr
  321                      | expr . '&' expr
  322                      | expr . '^' expr
  323                      | expr . '.' expr
  324                      | expr . '+' expr
  325                      | expr . '-' expr
  326                      | expr . '*' expr
  327                      | expr . "** (T_POW)" expr
  328                      | expr . '/' expr
  329                      | expr . '%' expr
  330                      | expr . "<< (T_SL)" expr
  331                      | expr . ">> (T_SR)" expr
  336                      | expr . "=== (T_IS_IDENTICAL)" expr
  337                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  338                      | expr . "== (T_IS_EQUAL)" expr
  339                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  340                      | expr . '<' expr
  341                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  342                      | expr . '>' expr
  343                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  344                      | expr . "<=> (T_SPACESHIP)" expr
  345                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  348                      | expr . '?' expr ':' expr
  349                      | expr . '?' ':' expr
  350                      | expr . "?? (T_COALESCE)" expr

    "or (T_LOGICAL_OR)"           shift, and go to state 239
    "xor (T_LOGICAL_XOR)"         shift, and go to state 240
    "and (T_LOGICAL_AND)"         shift, and go to state 241
    '?'                           shift, and go to state 242
    "?? (T_COALESCE)"             shift, and go to state 243
    "|| (T_BOOLEAN_OR)"           shift, and go to state 244
    "&& (T_BOOLEAN_AND)"          shift, and go to state 245
    '|'                           shift, and go to state 246
    '^'                           shift, and go to state 247
    '&'                           shift, and go to state 248
    "== (T_IS_EQUAL)"             shift, and go to state 249
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 250
    "=== (T_IS_IDENTICAL)"        shift, and go to state 251
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 252
    "<=> (T_SPACESHIP)"           shift, and go to state 253
    '<'                           shift, and go to state 254
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 255
    '>'                           shift, and go to state 256
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 257
    "<< (T_SL)"                   shift, and go to state 258
    ">> (T_SR)"                   shift, and go to state 259
    '+'                           shift, and go to state 260
    '-'                           shift, and go to state 261
    '.'                           shift, and go to state 262
    '*'                           shift, and go to state 263
    '/'                           shift, and go to state 264
    '%'                           shift, and go to state 265
    "instanceof (T_INSTANCEOF)"   shift, and go to state 266
    "** (T_POW)"                  shift, and go to state 267

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 906


State 894

  280 class_const_list: class_const_list ',' class_const_decl .

    $default  reduce using rule 280 (class_const_list)


State 895

  244 class_statement: method_modifiers function returns_ref identifier '(' . parameter_list ')' return_type backup_doc_comment method_body

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 610
    "callable (T_CALLABLE)"    shift, and go to state 611
    "namespace (T_NAMESPACE)"  shift, and go to state 116
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 76

    ')'       reduce using rule 214 (parameter_list)
    $default  reduce using rule 219 (optional_type)

    namespace_name            go to state 83
    name                      go to state 612
    parameter_list            go to state 907
    non_empty_parameter_list  go to state 614
    parameter                 go to state 615
    optional_type             go to state 616
    type                      go to state 617


State 896

  162 function_declaration_statement: function returns_ref "identifier (T_STRING)" '(' parameter_list ')' return_type backup_doc_comment '{' inner_statement_list '}' .

    $default  reduce using rule 162 (function_declaration_statement)


State 897

  368 expr_without_variable: function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}' .

    $default  reduce using rule 368 (expr_without_variable)


State 898

  369 expr_without_variable: "static (T_STATIC)" function returns_ref '(' parameter_list ')' lexical_vars return_type backup_doc_comment '{' inner_statement_list '}' .

    $default  reduce using rule 369 (expr_without_variable)


State 899

  189 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" ';' .

    $default  reduce using rule 189 (for_statement)


State 900

  122 inner_statement_list: inner_statement_list . inner_statement
  156 catch_list: catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 908
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 901

  261 absolute_trait_method_reference: name ":: (T_PAAMAYIM_NEKUDOTAYIM)" identifier .

    $default  reduce using rule 261 (absolute_trait_method_reference)


State 902

  255 trait_alias: trait_method_reference "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 255 (trait_alias)


State 903

  256 trait_alias: trait_method_reference "as (T_AS)" reserved_non_modifiers .

    $default  reduce using rule 256 (trait_alias)


State 904

  257 trait_alias: trait_method_reference "as (T_AS)" member_modifier . identifier
  258            | trait_method_reference "as (T_AS)" member_modifier .

    "include (T_INCLUDE)"                shift, and go to state 400
    "include_once (T_INCLUDE_ONCE)"      shift, and go to state 401
    "eval (T_EVAL)"                      shift, and go to state 402
    "require (T_REQUIRE)"                shift, and go to state 403
    "require_once (T_REQUIRE_ONCE)"      shift, and go to state 404
    "or (T_LOGICAL_OR)"                  shift, and go to state 405
    "xor (T_LOGICAL_XOR)"                shift, and go to state 406
    "and (T_LOGICAL_AND)"                shift, and go to state 407
    "print (T_PRINT)"                    shift, and go to state 408
    "yield (T_YIELD)"                    shift, and go to state 409
    "instanceof (T_INSTANCEOF)"          shift, and go to state 410
    "new (T_NEW)"                        shift, and go to state 411
    "clone (T_CLONE)"                    shift, and go to state 412
    "elseif (T_ELSEIF)"                  shift, and go to state 413
    "else (T_ELSE)"                      shift, and go to state 414
    "endif (T_ENDIF)"                    shift, and go to state 415
    "static (T_STATIC)"                  shift, and go to state 416
    "abstract (T_ABSTRACT)"              shift, and go to state 417
    "final (T_FINAL)"                    shift, and go to state 418
    "private (T_PRIVATE)"                shift, and go to state 419
    "protected (T_PROTECTED)"            shift, and go to state 420
    "public (T_PUBLIC)"                  shift, and go to state 421
    "identifier (T_STRING)"              shift, and go to state 422
    "exit (T_EXIT)"                      shift, and go to state 423
    "if (T_IF)"                          shift, and go to state 424
    "echo (T_ECHO)"                      shift, and go to state 425
    "do (T_DO)"                          shift, and go to state 426
    "while (T_WHILE)"                    shift, and go to state 427
    "endwhile (T_ENDWHILE)"              shift, and go to state 428
    "for (T_FOR)"                        shift, and go to state 429
    "endfor (T_ENDFOR)"                  shift, and go to state 430
    "foreach (T_FOREACH)"                shift, and go to state 431
    "endforeach (T_ENDFOREACH)"          shift, and go to state 432
    "declare (T_DECLARE)"                shift, and go to state 433
    "enddeclare (T_ENDDECLARE)"          shift, and go to state 434
    "as (T_AS)"                          shift, and go to state 435
    "switch (T_SWITCH)"                  shift, and go to state 436
    "endswitch (T_ENDSWITCH)"            shift, and go to state 437
    "case (T_CASE)"                      shift, and go to state 438
    "default (T_DEFAULT)"                shift, and go to state 439
    "break (T_BREAK)"                    shift, and go to state 440
    "continue (T_CONTINUE)"              shift, and go to state 441
    "goto (T_GOTO)"                      shift, and go to state 442
    "function (T_FUNCTION)"              shift, and go to state 443
    "const (T_CONST)"                    shift, and go to state 444
    "return (T_RETURN)"                  shift, and go to state 445
    "try (T_TRY)"                        shift, and go to state 446
    "catch (T_CATCH)"                    shift, and go to state 447
    "finally (T_FINALLY)"                shift, and go to state 448
    "throw (T_THROW)"                    shift, and go to state 449
    "use (T_USE)"                        shift, and go to state 450
    "insteadof (T_INSTEADOF)"            shift, and go to state 451
    "global (T_GLOBAL)"                  shift, and go to state 452
    "var (T_VAR)"                        shift, and go to state 453
    "unset (T_UNSET)"                    shift, and go to state 454
    "isset (T_ISSET)"                    shift, and go to state 455
    "empty (T_EMPTY)"                    shift, and go to state 456
    "__halt_compiler (T_HALT_COMPILER)"  shift, and go to state 457
    "class (T_CLASS)"                    shift, and go to state 458
    "trait (T_TRAIT)"                    shift, and go to state 459
    "interface (T_INTERFACE)"            shift, and go to state 460
    "extends (T_EXTENDS)"                shift, and go to state 461
    "implements (T_IMPLEMENTS)"          shift, and go to state 462
    "list (T_LIST)"                      shift, and go to state 463
    "array (T_ARRAY)"                    shift, and go to state 464
    "callable (T_CALLABLE)"              shift, and go to state 465
    "__LINE__ (T_LINE)"                  shift, and go to state 466
    "__FILE__ (T_FILE)"                  shift, and go to state 467
    "__DIR__ (T_DIR)"                    shift, and go to state 468
    "__CLASS__ (T_CLASS_C)"              shift, and go to state 469
    "__TRAIT__ (T_TRAIT_C)"              shift, and go to state 470
    "__METHOD__ (T_METHOD_C)"            shift, and go to state 471
    "__FUNCTION__ (T_FUNC_C)"            shift, and go to state 472
    "namespace (T_NAMESPACE)"            shift, and go to state 473
    "__NAMESPACE__ (T_NS_C)"             shift, and go to state 474

    $default  reduce using rule 258 (trait_alias)

    reserved_non_modifiers  go to state 476
    semi_reserved           go to state 477
    identifier              go to state 909


State 905

  246 name_list: name_list . ',' name
  254 trait_precedence: absolute_trait_method_reference "insteadof (T_INSTEADOF)" name_list .

    ','  shift, and go to state 720

    $default  reduce using rule 254 (trait_precedence)


State 906

  282 class_const_decl: identifier '=' expr backup_doc_comment .

    $default  reduce using rule 282 (class_const_decl)


State 907

  244 class_statement: method_modifiers function returns_ref identifier '(' parameter_list . ')' return_type backup_doc_comment method_body

    ')'  shift, and go to state 910


State 908

  156 catch_list: catch_list "catch (T_CATCH)" '(' name "variable (T_VARIABLE)" ')' '{' inner_statement_list '}' .

    $default  reduce using rule 156 (catch_list)


State 909

  257 trait_alias: trait_method_reference "as (T_AS)" member_modifier identifier .

    $default  reduce using rule 257 (trait_alias)


State 910

  244 class_statement: method_modifiers function returns_ref identifier '(' parameter_list ')' . return_type backup_doc_comment method_body

    ':'  shift, and go to state 781

    $default  reduce using rule 224 (return_type)

    return_type  go to state 911


State 911

  244 class_statement: method_modifiers function returns_ref identifier '(' parameter_list ')' return_type . backup_doc_comment method_body

    $default  reduce using rule 371 (backup_doc_comment)

    backup_doc_comment  go to state 912


State 912

  244 class_statement: method_modifiers function returns_ref identifier '(' parameter_list ')' return_type backup_doc_comment . method_body

    ';'  shift, and go to state 913
    '{'  shift, and go to state 914

    method_body  go to state 915


State 913

  262 method_body: ';' .

    $default  reduce using rule 262 (method_body)


State 914

  263 method_body: '{' . inner_statement_list '}'

    $default  reduce using rule 123 (inner_statement_list)

    inner_statement_list  go to state 916


State 915

  244 class_statement: method_modifiers function returns_ref identifier '(' parameter_list ')' return_type backup_doc_comment method_body .

    $default  reduce using rule 244 (class_statement)


State 916

  122 inner_statement_list: inner_statement_list . inner_statement
  263 method_body: '{' inner_statement_list . '}'

    "include (T_INCLUDE)"                         shift, and go to state 4
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 5
    "eval (T_EVAL)"                               shift, and go to state 6
    "require (T_REQUIRE)"                         shift, and go to state 7
    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 8
    "print (T_PRINT)"                             shift, and go to state 9
    "yield (T_YIELD)"                             shift, and go to state 10
    "yield from (T_YIELD_FROM)"                   shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    "++ (T_INC)"                                  shift, and go to state 16
    "-- (T_DEC)"                                  shift, and go to state 17
    "(int) (T_INT_CAST)"                          shift, and go to state 18
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 21
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 22
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 23
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 24
    '@'                                           shift, and go to state 25
    '['                                           shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "clone (T_CLONE)"                             shift, and go to state 28
    "static (T_STATIC)"                           shift, and go to state 29
    "abstract (T_ABSTRACT)"                       shift, and go to state 30
    "final (T_FINAL)"                             shift, and go to state 31
    "integer number (T_LNUMBER)"                  shift, and go to state 32
    "floating-point number (T_DNUMBER)"           shift, and go to state 33
    "identifier (T_STRING)"                       shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "exit (T_EXIT)"                               shift, and go to state 38
    "if (T_IF)"                                   shift, and go to state 39
    "echo (T_ECHO)"                               shift, and go to state 40
    "do (T_DO)"                                   shift, and go to state 41
    "while (T_WHILE)"                             shift, and go to state 42
    "for (T_FOR)"                                 shift, and go to state 43
    "foreach (T_FOREACH)"                         shift, and go to state 44
    "declare (T_DECLARE)"                         shift, and go to state 45
    "switch (T_SWITCH)"                           shift, and go to state 46
    "break (T_BREAK)"                             shift, and go to state 47
    "continue (T_CONTINUE)"                       shift, and go to state 48
    "goto (T_GOTO)"                               shift, and go to state 49
    "function (T_FUNCTION)"                       shift, and go to state 50
    "return (T_RETURN)"                           shift, and go to state 52
    "try (T_TRY)"                                 shift, and go to state 53
    "throw (T_THROW)"                             shift, and go to state 54
    "global (T_GLOBAL)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 375
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__LINE__ (T_LINE)"                           shift, and go to state 66
    "__FILE__ (T_FILE)"                           shift, and go to state 67
    "__DIR__ (T_DIR)"                             shift, and go to state 68
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 69
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 70
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 71
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 116
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '}'                                           shift, and go to state 917
    '`'                                           shift, and go to state 80
    '"'                                           shift, and go to state 81
    '$'                                           shift, and go to state 82

    namespace_name                   go to state 83
    name                             go to state 84
    inner_statement                  go to state 377
    statement                        go to state 378
    function_declaration_statement   go to state 379
    class_declaration_statement      go to state 380
    class_modifiers                  go to state 89
    class_modifier                   go to state 90
    trait_declaration_statement      go to state 381
    interface_declaration_statement  go to state 382
    if_stmt_without_else             go to state 93
    if_stmt                          go to state 94
    alt_if_stmt_without_else         go to state 95
    alt_if_stmt                      go to state 96
    new_expr                         go to state 97
    expr_without_variable            go to state 98
    function                         go to state 99
    function_call                    go to state 100
    class_name                       go to state 101
    dereferencable_scalar            go to state 102
    scalar                           go to state 103
    constant                         go to state 104
    expr                             go to state 105
    variable_class_name              go to state 106
    dereferencable                   go to state 107
    callable_expr                    go to state 108
    callable_variable                go to state 109
    variable                         go to state 110
    simple_variable                  go to state 111
    static_member                    go to state 112
    internal_functions_in_yacc       go to state 113


State 917

  263 method_body: '{' inner_statement_list '}' .

    $default  reduce using rule 263 (method_body)
